<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Spitlo.com - Shell</title>
	<link href="https://spitlo.com/technologies/shell/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://spitlo.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-03-26T00:00:00+00:00</updated>
	<id>https://spitlo.com/technologies/shell/atom.xml</id>
	<entry xml:lang="en">
		<title>Snippetizer</title>
		<published>2021-03-26T00:00:00+00:00</published>
		<updated>2021-03-26T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/snippetizer/" type="text/html"/>
		<id>https://spitlo.com/code/snippetizer/</id>
		<content type="html">&lt;p&gt;I made &lt;code&gt;snippetizer&lt;&#x2F;code&gt; to be able to quickly produce snippets of the material from &lt;a href=&quot;&#x2F;music&#x2F;stromata&quot;&gt;Stromata&lt;&#x2F;a&gt;. It uses &lt;code&gt;ffmpeg&lt;&#x2F;code&gt; and &lt;code&gt;ffprobe&lt;&#x2F;code&gt; and takes a few arguments:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;  [start|middle|end]    What part of the file you want to snippet.
                        Defaults to &amp;#39;middle&amp;#39;.
  [&amp;lt;any integer&amp;gt;]       Snippet length in seconds.
                        Defaults to &amp;#39;30&amp;#39;.
  [-n&#x2F;--nofade]         Don’t fade in and out.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If no arguments are supplied, it creates a 30 second snippet of a file, with 2 second fade-in and 3 second fade-out.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rotnot</title>
		<published>2020-12-05T00:00:00+00:00</published>
		<updated>2020-12-05T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/rotnot/" type="text/html"/>
		<id>https://spitlo.com/code/rotnot/</id>
		<content type="html">&lt;p&gt;Rotnot tries to figure out the notes of sound samples based on their filename, and save that note as meta data in the file.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment it works on a bunch of multi sampled instruments I had available, where the filename were either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Note+octave (&lt;code&gt;a#4.wav&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Collection_name-note+octave (&lt;code&gt;MutedTrumpet-Bb2.wav&lt;&#x2F;code&gt;); or&lt;&#x2F;li&gt;
&lt;li&gt;The actual midi note (&lt;code&gt;031.wav&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The midi note is then written back to the wave file as part of the “Sampler Chunk”, in the &lt;code&gt;MIDI Unity Note&lt;&#x2F;code&gt; field.&lt;&#x2F;p&gt;
&lt;p&gt;The “Instrument Chunk” has a field with similar purpose, &lt;code&gt;MIDI Unshifted Note&lt;&#x2F;code&gt;. Future versions might write to that as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot; aria-label=&quot;Anchor link for: usage&quot;&gt;#&lt;&#x2F;a&gt;Usage&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;code&gt;rotnot&lt;&#x2F;code&gt; directory, enter:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;node index.js
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;rationale&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rationale&quot; aria-label=&quot;Anchor link for: rationale&quot;&gt;#&lt;&#x2F;a&gt;Rationale&lt;&#x2F;h2&gt;
&lt;p&gt;I own a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;1010music.com&#x2F;product&#x2F;blackbox&quot;&gt;1010music blackbox hardware sampler&lt;&#x2F;a&gt;. It can load a folder of samples as a multi-sample instrument, but it doesn’t use filenames for note recognition. So I use this to prepare sample packs before moving them to the SD card.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Firetrak</title>
		<published>2020-12-01T00:00:00+00:00</published>
		<updated>2020-12-01T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/firetrak/" type="text/html"/>
		<id>https://spitlo.com/code/firetrak/</id>
		<content type="html">&lt;p&gt;Firetrak is used to develop locally with real https certificates using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;traefik.io&quot;&gt;Traefik&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;letsencrypt.org&#x2F;&quot;&gt;Let’s Encrypt&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When running Gatsby&#x2F;Next&#x2F;Django&#x2F;node projects (and other projects that expose a single port we can reverse proxy to) you won’t need Docker&#x2F;Pilothouse&#x2F;Nginx or whatever you currently use to serve https locally. Also, you won’t need to add entries to your &lt;code&gt;hosts&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment, Firetrak supports domains managed by Digitalocean, but it should be pretty easy to extend it to work with any of the Traefik’s &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.traefik.io&#x2F;traefik&#x2F;https&#x2F;acme&#x2F;#providers&quot;&gt;supported providers&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rationale&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rationale&quot; aria-label=&quot;Anchor link for: rationale&quot;&gt;#&lt;&#x2F;a&gt;Rationale&lt;&#x2F;h2&gt;
&lt;p&gt;A lot of my projects at &lt;code&gt;$WORK&lt;&#x2F;code&gt; demand that we use https in development. In 2017 I got a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Pilothouse-App&#x2F;Pilothouse&#x2F;issues&#x2F;93&quot;&gt;feature request&lt;&#x2F;a&gt; implemented in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.pilothouse-app.org&#x2F;&quot;&gt;Pilothouse&lt;&#x2F;a&gt; that allows for using it as a reverse proxy for local projects, and we have used it with success since. But Pilothouse is mostly made for PHP development, depends on Docker, and downloads a bunch of containers to enable multiple versions of PHP. That’s ok on my work computer, but my laptop struggles with it. Also, Covid means more development done on the laptop, and since we don’t do much WordPress development anymore anyway, I felt it was time to look for a more lightweight solution. Hopefully, Firetrak is that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;#&lt;&#x2F;a&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;firetrak&quot;&gt;the repo&lt;&#x2F;a&gt; for up-to-date install instructions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Dotfiles</title>
		<published>2020-11-26T00:00:00+00:00</published>
		<updated>2020-11-26T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/dotfiles/" type="text/html"/>
		<id>https://spitlo.com/code/dotfiles/</id>
		<content type="html">&lt;p&gt;I keep most of my aliases, functions and config files in a dotfiles repo. They are currently used on two Macs running Mojave, one Pinebook Pro running Manjaro, an Android running Termux on LineageOS and on several instances of Ubuntu Server, so I try to make sure everything’s portable.&lt;&#x2F;p&gt;
&lt;p&gt;Some of this stuff probably only makes sense for me, but there are a few gems here and there that might be of use for others as well.&lt;&#x2F;p&gt;
&lt;p&gt;Below are a few of my most used functions&#x2F;aliases:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cdp&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdp&quot; aria-label=&quot;Anchor link for: cdp&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L438-L484&quot;&gt;&lt;code&gt;cdp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This allows me to jump quickly into project folders. If the project contains an &lt;code&gt;.nvmrc&lt;&#x2F;code&gt; or &lt;code&gt;.python-version&lt;&#x2F;code&gt; file, the correct versions of &lt;code&gt;node&lt;&#x2F;code&gt; and &lt;code&gt;python&lt;&#x2F;code&gt; are set.&lt;&#x2F;p&gt;
&lt;p&gt;The function uses &lt;code&gt;$PROJECT_FOLDER&lt;&#x2F;code&gt; to know where to look. I set it in a file kept out of source control.&lt;&#x2F;p&gt;
&lt;p&gt;There is a corresponding &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;6f41ade4e2ff75e7ddb147d727ec8ad53917d87a&#x2F;.bash_completions&#x2F;cdp&quot;&gt;bash completion script&lt;&#x2F;a&gt;, so if I set &lt;code&gt;$LOCAL_PROJECTS&lt;&#x2F;code&gt; to a space separated string of project names, I get tab completion and can navigate EVEN QUICKER!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#xt&quot; aria-label=&quot;Anchor link for: xt&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L119-L156&quot;&gt;&lt;code&gt;xt&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is so I never have to learn the flags for unrar, unzip, gunzip, tar et al. Cant’t remember where I got this from initially.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgs.xkcd.com&#x2F;comics&#x2F;tar.png&quot; alt=&quot;XKCD: Tar&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qrab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#qrab&quot; aria-label=&quot;Anchor link for: qrab&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L706-L712&quot;&gt;&lt;code&gt;qrab&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This uses &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fukuchi&#x2F;libqrencode&quot;&gt;&lt;code&gt;qrencode&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to create a QR code from whatever is in the clipboard and print it to the terminal. Very helpful when I need to move small pieces of information from my laptop to my phone quickly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;weather&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#weather&quot; aria-label=&quot;Anchor link for: weather&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L771-L773&quot;&gt;&lt;code&gt;weather&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I can never remember where to &lt;code&gt;curl&lt;&#x2F;code&gt; the weather from and what query strings to use, so now I just run &lt;code&gt;weather london&lt;&#x2F;code&gt; to get the London weather in a compact form.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dict&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dict&quot; aria-label=&quot;Anchor link for: dict&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L527-L531&quot;&gt;&lt;code&gt;dict&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Basically the same as &lt;code&gt;weather&lt;&#x2F;code&gt; but for dictionary definitions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;squash&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#squash&quot; aria-label=&quot;Anchor link for: squash&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;bin&#x2F;squash&quot;&gt;&lt;code&gt;squash&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I work on some projects that’s been around since the early 2010s, and I need a local clone, including all assets, for them to work properly when developing. So I need to keep gigs and gigs of images just lying about on my harddrive. But they don’t need to look pretty. So every once in a while I run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;find .&#x2F;media&#x2F;images -xdev -name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;*.jpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dedede;&quot;&gt; -mtime +360 -execdir squash {} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#ff8080;&quot;&gt;\;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;squash&lt;&#x2F;code&gt; uses ImageMagicks’s &lt;code&gt;mogrify&lt;&#x2F;code&gt; to set the jpeg quality to one, then resets the file’s timestamp, to prevent possible overwrites when syncing with the production server. I can also run it with the environment variable &lt;code&gt;MINIMUM_SIZE&lt;&#x2F;code&gt; set, to only affect images of a significant size.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-tp&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update-tp&quot; aria-label=&quot;Anchor link for: update-tp&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;bin&#x2F;update-tp&quot;&gt;&lt;code&gt;update-tp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;update-tp&lt;&#x2F;code&gt; helps me to update a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;termux&#x2F;termux-packages&quot;&gt;Termux package&lt;&#x2F;a&gt; in my fork, then create a consistently worded commit so I can do a PR. It’s pretty scary to contribute to popular projects and I want to make sure I get it right if I do.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Zola Deploy</title>
		<published>2020-11-26T00:00:00+00:00</published>
		<updated>2020-11-26T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/zola-deploy/" type="text/html"/>
		<id>https://spitlo.com/code/zola-deploy/</id>
		<content type="html">&lt;p&gt;I prefer to keep my GitHub Pages files in a &lt;code&gt;docs&lt;&#x2F;code&gt; folder, and not in a separate branch.&lt;&#x2F;p&gt;
&lt;p&gt;But both available actions for Zola deploys in the marketplace uses the &lt;code&gt;gh-pages&lt;&#x2F;code&gt; (branch) method, so I forked the simplest of them and made it even simpler. Than I made it a bit less simple.&lt;&#x2F;p&gt;
&lt;p&gt;This action could be used on &lt;code&gt;push&lt;&#x2F;code&gt; for automatic deploys, but I use it with the event &lt;code&gt;workflow_dispatch&lt;&#x2F;code&gt; to be able to trigger a deploy manually from inside GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;It runs &lt;code&gt;zola check&lt;&#x2F;code&gt; before building. If you supply a &lt;code&gt;SITE_URL&lt;&#x2F;code&gt; variable, it will try to shrink the search index file by replacing all instances of &lt;code&gt;$SITE_URL&lt;&#x2F;code&gt; with empty space.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Shopify Labels</title>
		<published>2020-11-25T00:00:00+00:00</published>
		<updated>2020-11-25T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/shopify-labels/" type="text/html"/>
		<id>https://spitlo.com/code/shopify-labels/</id>
		<content type="html">&lt;p&gt;This is a very basic app for loading a CSV file of orders exported from Shopify, and generating pages suitable for printing address labels.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment it’s mostly hardcoded to suit my needs, which are three column A4 pages with eleven rows of labels for shipping inside Sweden. The amount of columns and rows can be changed, but it’s not tested. I might make it more customizable in the future, especially since print CSS is quirky and label printing needs some precision&#x2F;fiddling.&lt;&#x2F;p&gt;
&lt;p&gt;No files are sent to the server, this is just a one page HTML&#x2F;JavaScript app.&lt;&#x2F;p&gt;
&lt;p&gt;It’s available online at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;spitlo.com&#x2F;shopify-labels&#x2F;&quot;&gt;https:&#x2F;&#x2F;spitlo.com&#x2F;shopify-labels&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>At-a-dev</title>
		<published>2020-11-16T00:00:00+00:00</published>
		<updated>2020-11-16T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/atadev/" type="text/html"/>
		<id>https://spitlo.com/code/atadev/</id>
		<content type="html">&lt;p&gt;At-a-dev is a simple bash script to enable &lt;code&gt;@&lt;&#x2F;code&gt;:ing other devs in code and getting notifications about mentions on &lt;code&gt;git pull&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Use it as a post-merge hook and it will check new files for any mentions and alert the user.&lt;&#x2F;p&gt;
&lt;p&gt;Use it as a command line tool and it will show you all your messages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage-example&quot; aria-label=&quot;Anchor link for: usage-example&quot;&gt;#&lt;&#x2F;a&gt;Usage example&lt;&#x2F;h2&gt;
&lt;p&gt;The office nitpicker spots a few flagrant style crimes, and commits and pushes the following in &lt;code&gt;src&#x2F;index.js&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;background-color:#303030;color:#fffb9d;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#dedede;&quot;&gt;myConst &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#ececec;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#dedede;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#87ae86;&quot;&gt; @John Please use const and not var
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;  a: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#87d6d5;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#dedede;&quot;&gt;  b: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;font-weight:bold;color:#87d6d5;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#87ae86;&quot;&gt; @Bella Please add a trailing comma here, see our style guide
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#87ae86;&quot;&gt; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When John runs &lt;code&gt;git pull&lt;&#x2F;code&gt;, he sees the following message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;Mentions in .&#x2F;src&#x2F;index.js
==========================
On line 5:
  var myConst = { &#x2F;&#x2F; @John Please use const and not var
On line 9:
  &#x2F;&#x2F; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When Bella runs &lt;code&gt;git pull&lt;&#x2F;code&gt;, she sees the following message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;Mentions in .&#x2F;src&#x2F;index.js
==========================
On line 7:
  b: 2 &#x2F;&#x2F; @Bella Please add a trailing comma here, see our style guide
On line 9:
  &#x2F;&#x2F; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bella and John makes their respective changes and remove the relevant message.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps one of them adds a new message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#fffb9d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6ae;&quot;&gt;myConst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;{
  a: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#87d6d5;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;,
  b: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#87d6d5;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#303030;color:#87ae86;&quot;&gt; Hey, @OfficeNitpicker, it’s better to @ one dev per line, see our style guide
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;#&lt;&#x2F;a&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;atadev&quot;&gt;the repo&lt;&#x2F;a&gt; for up-to-date install instructions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Merc</title>
		<published>2020-11-16T00:00:00+00:00</published>
		<updated>2020-11-16T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/merc/" type="text/html"/>
		<id>https://spitlo.com/code/merc/</id>
		<content type="html">&lt;h2 id=&quot;a-gemini-client-written-for-deno&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-gemini-client-written-for-deno&quot; aria-label=&quot;Anchor link for: a-gemini-client-written-for-deno&quot;&gt;#&lt;&#x2F;a&gt;A Gemini client written for Deno&lt;&#x2F;h2&gt;
&lt;p&gt;Merc (formally Mercuriceratops) is a basic client for Gemini, inspired by the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tildegit.org&#x2F;solderpunk&quot;&gt;100 LOC demos&lt;&#x2F;a&gt; by solderpunk.&lt;&#x2F;p&gt;
&lt;p&gt;The name is a nod to and a gentle jab at the tendency in both Deno and Gemini communities to name projects after dinosaurs and zodiac stuff, respectively. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mercuriceratops&quot;&gt;mercuriceratops&lt;&#x2F;a&gt; is a dinosaur of the type species &lt;em&gt;Mercuriceratops gemini&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;alert&quot;&gt;
  This project is now on hold, since I can’t really figure out how to make Deno accept most certificates.
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;install-update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install-update&quot; aria-label=&quot;Anchor link for: install-update&quot;&gt;#&lt;&#x2F;a&gt;Install&#x2F;update&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;mercuriceratops&quot;&gt;the repo&lt;&#x2F;a&gt; for up-to-date install instructions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot; aria-label=&quot;Anchor link for: usage&quot;&gt;#&lt;&#x2F;a&gt;Usage&lt;&#x2F;h2&gt;
&lt;p&gt;To visit a Gemini page, enter the URL at the &lt;code&gt;URL&amp;gt;&lt;&#x2F;code&gt; prompt or start it with a URL as argument.
Merc only handles Gemini links for now, and you can leave out the protocol part of the URL.
To go back, enter ‘b’ at the prompt. To quit, enter ‘q’.
To search using gus.guru, enter ‘s’ and then enter your query at the &lt;code&gt;SEARCH&amp;gt;&lt;&#x2F;code&gt; prompt.
To follow a link, enter the link number and press enter.&lt;&#x2F;p&gt;
&lt;p&gt;You can also supply a URL directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;options&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#options&quot; aria-label=&quot;Anchor link for: options&quot;&gt;#&lt;&#x2F;a&gt;Options&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#393939;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#dedede;&quot;&gt;  -h, --help
          Prints help end exits
  -d, --dump
          Prints document body and exits
  -w, --width &amp;lt;number&amp;gt;
          Wraps text at &amp;lt;number&amp;gt; columns
  -p, --paginate &amp;lt;number&amp;gt;
          Show &amp;lt;number&amp;gt; of rows at a time.
          Defaults to 50 if no &amp;lt;number&amp;gt; is supplied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Spitlo.com</title>
		<published>2020-11-15T00:00:00+00:00</published>
		<updated>2020-11-15T00:00:00+00:00</updated>
		<link href="https://spitlo.com/code/spitlo-com/" type="text/html"/>
		<id>https://spitlo.com/code/spitlo-com/</id>
		<content type="html">&lt;p&gt;I made this site mainly to improve my HTML and front-end skills, having done mostly React and back-end work the last few years.&lt;&#x2F;p&gt;
&lt;p&gt;I also wanted to try out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; and get away from JavaScript for a while.&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, it’s a nice low-stakes place to have some fun and try stuff out, for example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Pages hosting with a custom domain name&lt;&#x2F;li&gt;
&lt;li&gt;GitHub Actions&lt;&#x2F;li&gt;
&lt;li&gt;Handcoded or programatically generated SVGs&lt;&#x2F;li&gt;
&lt;li&gt;Undocumented CSS stuff like animating the &lt;code&gt;content&lt;&#x2F;code&gt; value of &lt;code&gt;::before&lt;&#x2F;code&gt; and &lt;code&gt;::after&lt;&#x2F;code&gt; pseudo-elements&lt;&#x2F;li&gt;
&lt;li&gt;Newer&#x2F;partially supported HTML elements like &lt;code&gt;&amp;lt;details&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ever so slightly dipping my toes into the Rust ecosystem&lt;&#x2F;li&gt;
&lt;li&gt;Using AVIF&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;issues&#x2F;1202&quot;&gt;?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
