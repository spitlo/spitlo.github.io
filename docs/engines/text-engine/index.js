// minified with jsmin

let disk;let inputs=[''];let inputsPos=0;let bullet='â€¢';let input=document.querySelector('#input');let init=(disk)=>{const initializedDisk=Object.assign({},disk);initializedDisk.rooms=disk.rooms.map((room)=>{room.visits=0;return room;});if(!initializedDisk.inventory){initializedDisk.inventory=[];}
if(!initializedDisk.characters){initializedDisk.characters=[];}
initializedDisk.characters=initializedDisk.characters.map(char=>{char.chatLog=[];return char;});return initializedDisk;};let setup=()=>{input.addEventListener('keypress',(e)=>{const ENTER=13;if(e.keyCode===ENTER){applyInput();}});input.addEventListener('keydown',(e)=>{input.focus();const UP=38;const DOWN=40;const TAB=9;if(e.keyCode===UP){navigateHistory('prev');}else if(e.keyCode===DOWN){navigateHistory('next');}else if(e.keyCode===TAB){e.stopPropagation();e.preventDefault()
autocomplete();}});input.addEventListener('focusout',()=>{input.focus({preventScroll:true});});};let save=(name)=>{const save=JSON.stringify(disk,(key,value)=>typeof value==='function'?value.toString():value);localStorage.setItem(name,save);const line=name.length?`Game saved as "${name}".`:`Game saved.`;println(line);};let load=(name)=>{const save=localStorage.getItem(name);if(!save){println(`Save file not found.`);return;}
disk=JSON.parse(save,(key,value)=>{try{return eval(value);}catch(error){return value;}});const line=name.length?`Game "${name}" was loaded.`:`Game loaded.`;println(line);enterRoom(disk.roomId);};let inv=()=>{const items=disk.inventory.filter(item=>!item.isHidden);if(!items.length){println(`You don't have any items in your inventory.`);return;}
println(`You have the following items in your inventory:`);items.forEach(item=>{println(`${bullet} ${getName(item.name)}`);});};let look=()=>{const room=getRoom(disk.roomId);if(typeof room.onLook==='function'){room.onLook({disk,println});}
println(room.desc)};let lookThusly=(str)=>println(`You look ${str}.`);let lookAt=(args)=>{const[_,name]=args;const item=getItemInInventory(name)||getItemInRoom(name,disk.roomId);if(item){if(item.desc){println(item.desc);}else{println(`You don\'t notice anything remarkable about it.`);}
if(typeof(item.onLook)==='function'){item.onLook({disk,println,getRoom,enterRoom,item});}}else{const character=getCharacter(name,getCharactersInRoom(disk.roomId));if(character){if(character.desc){println(character.desc);}else{println(`You don't notice anything remarkable about them.`);}
if(typeof(character.onLook)==='function'){character.onLook({disk,println,getRoom,enterRoom,item});}}else{println(`You don't see any such thing.`);}}};let go=()=>{const room=getRoom(disk.roomId);const exits=room.exits.filter(exit=>!exit.isHidden);if(!exits){println(`There's nowhere to go.`);return;}
println(`Where would you like to go? Available directions are:`);exits.forEach((exit)=>{const rm=getRoom(exit.id);if(!rm){return;}
const dir=getName(exit.dir).toUpperCase();const directionName=rm.visits>0?`${dir} - ${rm.name}`:dir
println(`${bullet} ${directionName}`);});};let getExit=(dir,exits)=>exits.find(exit=>Array.isArray(exit.dir)?exit.dir.includes(dir):exit.dir===dir);let goDir=(dir)=>{const room=getRoom(disk.roomId);const exits=room.exits;if(!exits){println(`There's nowhere to go.`);return;}
const nextRoom=getExit(dir,exits);if(!nextRoom){println(`There is no exit in that direction.`);return;}
if(nextRoom.block){println(nextRoom.block);return;}
enterRoom(nextRoom.id);};let n=()=>goDir('north');let s=()=>goDir('south');let e=()=>goDir('east');let w=()=>goDir('west');let ne=()=>goDir('northeast');let se=()=>goDir('southeast');let nw=()=>goDir('northwest');let sw=()=>goDir('southwest');let talk=()=>{const characters=getCharactersInRoom(disk.roomId);if(characters.length===1){talkToOrAboutX('to',getName(characters[0].name));return;}
println(`You can talk TO someone or ABOUT some topic.`);chars();};let talkToOrAboutX=(preposition,x)=>{const room=getRoom(disk.roomId);if(preposition!=='to'&&preposition!=='about'){println(`You can talk TO someone or ABOUT some topic.`);return;}
const character=preposition==='to'&&getCharacter(x,getCharactersInRoom(room.id))?getCharacter(x,getCharactersInRoom(room.id)):disk.conversant;let topics;const listTopics=()=>{disk.conversation=topics;if(topics.length){const availableTopics=topics.filter(topic=>topicIsAvailable(character,topic));if(availableTopics.length){println(`What would you like to discuss?`);availableTopics.forEach(topic=>println(`${bullet} ${topic.option ? topic.option : topic.keyword.toUpperCase()}`));println(`${bullet} NOTHING`);}else{if(!character.onTalk){println(`You have nothing to discuss with ${getName(character.name)} at this time.`);}
endConversation();}}else if(Object.keys(topics).length){println(`Select a response:`);Object.keys(topics).forEach(topic=>println(`${bullet} ${topics[topic].option}`));}else{endConversation();}};if(preposition==='to'){if(!getCharacter(x)){println(`There is no one here by that name.`);return;}
if(!getCharacter(getName(x),getCharactersInRoom(room.id))){println(`There is no one here by that name.`);return;}
if(!character.topics){println(`You have nothing to discuss with ${getName(character.name)} at this time.`);return;}
if(typeof(character.topics)==='string'){println(character.topics);return;}
if(typeof(character.onTalk)==='function'){character.onTalk({disk,println,getRoom,enterRoom,room,character});}
topics=typeof character.topics==='function'?character.topics({println,room}):character.topics;if(!topics.length&&!Object.keys(topics).length){println(`You have nothing to discuss with ${getName(character.name)} at this time.`);return;}
character.chatLog=character.chatLog||[];disk.conversant=character;listTopics(topics);}else if(preposition==='about'){if(!disk.conversant){println(`You need to be in a conversation to talk about something.`);return;}
const character=eval(disk.conversant);if(getCharactersInRoom(room.id).includes(disk.conversant)){const response=x.toLowerCase();if(response==='nothing'){endConversation();println(`You end the conversation.`);}else if(disk.conversation&&disk.conversation[response]){disk.conversation[response].onSelected();}else{const topic=disk.conversation.length&&conversationIncludesTopic(disk.conversation,response);const isAvailable=topic&&topicIsAvailable(character,topic);if(isAvailable){if(topic.line){println(topic.line);}
if(topic.onSelected){topic.onSelected({disk,println,getRoom,enterRoom,room,character});}
character.chatLog.push(getKeywordFromTopic(topic));}else{println(`You talk about ${removePunctuation(x)}.`);println(`Type the capitalized KEYWORD to select a topic.`);}}
if(disk.conversation){topics=typeof character.topics==='function'?character.topics({println,room}):character.topics;listTopics(character);}}else{println(`That person is no longer available for conversation.`);disk.conversant=undefined;disk.conversation=undefined;}}};let take=()=>{const room=getRoom(disk.roomId);const items=(room.items||[]).filter(item=>item.isTakeable&&!item.isHidden);if(!items.length){println(`There's nothing to take.`);return;}
println(`The following items can be taken:`);items.forEach(item=>println(`${bullet} ${getName(item.name)}`));};let takeItem=(itemName)=>{const room=getRoom(disk.roomId);const findItem=item=>objectHasName(item,itemName);let itemIndex=room.items&&room.items.findIndex(findItem);if(typeof itemIndex==='number'&&itemIndex>-1){const item=room.items[itemIndex];if(item.isTakeable){disk.inventory.push(item);room.items.splice(itemIndex,1);if(typeof item.onTake==='function'){item.onTake({disk,println,room,getRoom,enterRoom,item});}else{println(`You took the ${getName(item.name)}.`);}}else{if(typeof item.onTake==='function'){item.onTake({disk,println,room,getRoom,enterRoom,item});}else{println(item.block||`You can't take that.`);}}}else{itemIndex=disk.inventory.findIndex(findItem);if(typeof itemIndex==='number'&&itemIndex>-1){println(`You already have that.`);}else{println(`You don't see any such thing.`);}}};let use=()=>{const room=getRoom(disk.roomId);const useableItems=(room.items||[]).concat(disk.inventory).filter(item=>item.onUse&&!item.isHidden);if(!useableItems.length){println(`There's nothing to use.`);return;}
println(`The following items can be used:`);useableItems.forEach((item)=>{println(`${bullet} ${getName(item.name)}`)});};let useItem=(itemName)=>{const item=getItemInInventory(itemName)||getItemInRoom(itemName,disk.roomId);if(!item){println(`You don't have that.`);return;}
if(item.use){console.warn(`Warning: The "use" property for Items has been renamed to "onUse" and support for "use" has been deprecated in text-engine 2.0. Please update your disk, renaming any "use" methods to be called "onUse" instead.`);item.onUse=item.use;}
if(!item.onUse){println(`That item doesn't have a use.`);return;}
if(typeof item.onUse==='string'){const use=eval(item.onUse);use({disk,println,getRoom,enterRoom,item});}else if(typeof item.onUse==='function'){item.onUse({disk,println,getRoom,enterRoom,item});}};let items=()=>{const room=getRoom(disk.roomId);const items=(room.items||[]).filter(item=>!item.isHidden);if(!items.length){println(`There's nothing here.`);return;}
println(`You see the following:`);items.forEach(item=>println(`${bullet} ${getName(item.name)}`));}
let chars=()=>{const room=getRoom(disk.roomId);const chars=getCharactersInRoom(room.id).filter(char=>!char.isHidden)
if(!chars.length){println(`There's no one here.`);return;}
println(`You see the following:`);chars.forEach(char=>println(`${bullet} ${getName(char.name)}`));};let help=()=>{const instructions=`The following commands are available:
    LOOK:   'look at key'
    TAKE:   'take book'
    GO:     'go north'
    USE:    'use door'
    TALK:   'talk to mary'
    ITEMS:  list items in the room
    INV:    list inventory items
    SAVE:   save the current game
    LOAD:   load the last saved game
    HELP:   this help menu
  `;println(instructions);};let say=()=>println([`Say what?`,`You don't say.`]);let sayString=(str)=>println(`You say ${removePunctuation(str)}.`);let getInput=()=>input.value.trim();let commands=[{inv,i:inv,look,l:look,go,n,s,e,w,ne,se,sw,nw,talk,t:talk,take,get:take,items,use,chars,help,say,save,load,restore:load,},{look:lookThusly,go:goDir,take:takeItem,get:takeItem,use:useItem,say:sayString,save:x=>save(x),load:x=>load(x),restore:x=>load(x),x:x=>lookAt([null,x]),t:x=>talkToOrAboutX('to',x),},{look:lookAt,say(args){const str=args.reduce((cur,acc)=>cur+' '+acc,'');sayString(str);},talk:args=>talkToOrAboutX(args[0],args[1]),x:args=>lookAt([null,...args]),},];let applyInput=(input)=>{input=input||getInput();inputs.push(input);inputsPos=inputs.length;println(`> ${input}`);const val=input.toLowerCase();setInput('');const exec=(cmd,arg)=>{if(cmd){cmd(arg);}else if(disk.conversation){println(`Type the capitalized KEYWORD to select a topic.`);}else{println(`Sorry, I didn't understand your input. For a list of available commands, type HELP.`);}};let args=val.split(' ')
if(args[0]!=='say'){args=args.filter(arg=>arg!=='a'&&arg!=='an'&&arg!='the');}
const[command,...arguments]=args;const room=getRoom(disk.roomId);if(arguments.length===1){exec(commands[1][command],arguments[0]);}else if(command==='take'&&arguments.length){takeItem(arguments[0]);}else if(command==='use'&&arguments.length){useItem(arguments[0]);}else if(arguments.length>=commands.length){exec(commands[commands.length-1][command],arguments);}else if(room.exits&&getExit(command,room.exits)){goDir(command);}else if(disk.conversation&&(disk.conversation[command]||conversationIncludesTopic(disk.conversation,command))){talkToOrAboutX('about',command);}else{exec(commands[arguments.length][command],arguments);}};let addStyleTags=(str,char,tagName)=>{let odd=true;while(str.includes(char)){const tag=odd?`<${tagName}>`:`</${tagName}>`;str=str.replace(char,tag);odd=!odd;}
return str;};let setInput=(str)=>{input.value=str;setTimeout(()=>{input.selectionStart=input.selectionEnd=input.value.length;});};let println=(line,className)=>{if(!line){return;}
str=Array.isArray(line)?pickOne(line):typeof line==='function'?line():line;const output=document.querySelector('#output');const newLine=document.createElement('div');if(className){newLine.classList.add(className);}
if(line[0]==='>'){newLine.classList.add('user');}
if(className!=='img'){str=addStyleTags(str,'__','u');str=addStyleTags(str,'**','b');str=addStyleTags(str,'*','i');str=addStyleTags(str,'~~','strike');}
while(str.includes('\n')){str=str.replace('\n','<br>');}
output.appendChild(newLine).innerHTML=str;window.scrollTo(0,document.body.scrollHeight);};let autocomplete=()=>{const room=getRoom(disk.roomId);const words=input.value.toLowerCase().trim().split(/\s+/);const wordsSansStub=words.slice(0,words.length-1);const itemNames=(room.items||[]).concat(disk.inventory).map(item=>item.name);const stub=words[words.length-1];let options;if(words.length===1){const allCommands=commands.reduce((acc,cur)=>acc.concat(Object.keys(cur)),[]).filter(cmd=>cmd.length>1);options=[...new Set(allCommands)];if(disk.conversation){options=Array.isArray(disk.conversation)?options.concat(disk.conversation.map(getKeywordFromTopic)):Object.keys(disk.conversation);options.push('nothing');}}else if(words.length===2){const optionMap={talk:['to','about'],take:itemNames,use:itemNames,go:(room.exits||[]).map(exit=>exit.dir),look:['at'],};options=optionMap[words[0]];}else if(words.length===3){const characterNames=(getCharactersInRoom(room.id)||[]).map(character=>character.name);const optionMap={to:characterNames,at:characterNames.concat(itemNames),};options=(optionMap[words[1]]||[]).flat().map(string=>string.toLowerCase());}
const stubRegex=new RegExp(`^${stub}`);const matches=(options||[]).flat().filter(option=>option.match(stubRegex));if(!matches.length){return;}
if(matches.length>1){const longestCommonStartingSubstring=(arr1)=>{const arr=arr1.concat().sort();const a1=arr[0];const a2=arr[arr.length-1];const L=a1.length;let i=0;while(i<L&&a1.charAt(i)===a2.charAt(i)){i++;}
return a1.substring(0,i);};input.value=[...wordsSansStub,longestCommonStartingSubstring(matches)].join(' ');}else{input.value=[...wordsSansStub,matches[0]].join(' ');}};let navigateHistory=(dir)=>{if(dir==='prev'){inputsPos--;if(inputsPos<0){inputsPos=0;}}else if(dir==='next'){inputsPos++;if(inputsPos>inputs.length){inputsPos=inputs.length;}}
setInput(inputs[inputsPos]||'');};let pickOne=arr=>arr[Math.floor(Math.random()*arr.length)];let getName=name=>typeof name==='object'?name[0]:name;let getRoom=(id)=>disk.rooms.find(room=>room.id===id);let removePunctuation=str=>str.replace(/[.,\/#?!$%\^&\*;:{}=\_`~()]/g,"");let removeExtraSpaces=str=>str.replace(/\s{2,}/g," ");let enterRoom=(id)=>{const room=getRoom(id);if(!room){println(`That exit doesn't seem to go anywhere.`);return;}
println(room.img,'img');if(room.name){println(`${getName(room.name)}`,'room-name');}
if(room.visits===0){println(room.desc);}
room.visits++;disk.roomId=id;if(typeof room.onEnter==='function'){room.onEnter({disk,println,getRoom,enterRoom});}
delete disk.conversation;delete disk.conversant;};let objectHasName=(obj,name)=>{const compareNames=n=>n.toLowerCase().includes(name.toLowerCase());return Array.isArray(obj.name)?obj.name.find(compareNames):compareNames(obj.name);}
let getCharactersInRoom=(roomId)=>disk.characters.filter(c=>c.roomId===roomId);let getCharacter=(name,chars=disk.characters)=>chars.find(char=>objectHasName(char,name));let getItemInRoom=(itemName,roomId)=>{const room=getRoom(roomId);return room.items&&room.items.find(item=>objectHasName(item,itemName))};let getItemInInventory=(name)=>disk.inventory.find(item=>objectHasName(item,name));let getKeywordFromTopic=(topic)=>{if(topic.keyword){return topic.keyword;}
const keyword=removeExtraSpaces(removePunctuation(topic.option)).split(' ').find(w=>w.length>1&&w.toUpperCase()===w).toLowerCase();return keyword;};let conversationIncludesTopic=(conversation,keyword)=>{if(keyword==='nothing'){return true;}
if(Array.isArray(disk.conversation)){return disk.conversation.find(t=>getKeywordFromTopic(t)===keyword);}
return disk.conversation[keyword];};let topicIsAvailable=(character,topic)=>{const prereqsOk=!topic.prereqs||topic.prereqs.every(keyword=>character.chatLog.includes(keyword));const readOk=!topic.removeOnRead||!character.chatLog.includes(getKeywordFromTopic(topic));return prereqsOk&&readOk;};let endConversation=()=>{disk.conversant=undefined;disk.conversation=undefined;};let loadDisk=(uninitializedDisk)=>{disk=init(uninitializedDisk);enterRoom(disk.roomId);setup();input.focus();};if(typeof module!=='undefined'&&typeof module.exports!=='undefined'){module.exports=loadDisk;}