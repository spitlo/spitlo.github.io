<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Spitlo.com - Electronic</title>
	<link href="https://spitlo.com/categories/electronic/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://spitlo.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-10-01T00:00:00+00:00</updated>
	<id>https://spitlo.com/categories/electronic/atom.xml</id>
	<entry xml:lang="en">
		<title>Looptober 2022</title>
		<published>2022-10-01T00:00:00+00:00</published>
		<updated>2022-10-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/music/looptober-2022/" type="text/html"/>
		<id>https://spitlo.com/music/looptober-2022/</id>
		<content type="html">&lt;p&gt;Looptober? Why not! I saw it mentioned somewhere, but I couldn’t really find any “rules” so I decided to interpret it literally. I’m creating one short loop a day for the month of October as a way of getting to know the Elektron Syntakt. Below are the fruits of that labor. &lt;&#x2F;p&gt;
&lt;p&gt;Success-o-meter: ~&lt;code&gt;77&lt;&#x2F;code&gt;% done. Three fourths done, and tomorrow four fifths. The day after that, five sixths. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;mark class=&quot;arrow&quot;&gt;NB&lt;&#x2F;mark&gt; These are made to be played in a loop, but if you only want a quick peek they are still playable using the &lt;code&gt;:play&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;mark class=&quot;arrow&quot;&gt;NB2&lt;&#x2F;mark&gt; If you grow tired of the audio visualization, click it to switch to another type.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;mark class=&quot;arrow&quot;&gt;PROTIP&lt;&#x2F;mark&gt; The mute button only mutes when pressed, use it to add flair to your late night freestyle sessions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;01-duckboy-86-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#01-duckboy-86-bpm&quot; aria-label=&quot;Anchor link for: 01-duckboy-86-bpm&quot;&gt;#&lt;&#x2F;a&gt;01 - Duckboy (86 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-1&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;01-duckboy.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-1&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-1&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-1&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-1&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-1&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;01-duckboy.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-1&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;01-duckboy.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;02-grvyrdshft-72-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#02-grvyrdshft-72-bpm&quot; aria-label=&quot;Anchor link for: 02-grvyrdshft-72-bpm&quot;&gt;#&lt;&#x2F;a&gt;02 - Grvyrdshft (72 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-2&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;02-grvyrdshft.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-2&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-2&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-2&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-2&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-2&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;02-grvyrdshft.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-2&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;02-grvyrdshft.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;03-spacejoust-80-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#03-spacejoust-80-bpm&quot; aria-label=&quot;Anchor link for: 03-spacejoust-80-bpm&quot;&gt;#&lt;&#x2F;a&gt;03 - Spacejoust (80 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-3&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;03-spacejoust.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-3&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-3&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-3&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-3&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-3&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;03-spacejoust.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-3&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;03-spacejoust.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;04-cibercryme-89-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#04-cibercryme-89-bpm&quot; aria-label=&quot;Anchor link for: 04-cibercryme-89-bpm&quot;&gt;#&lt;&#x2F;a&gt;04 - Cibercryme (89 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-4&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;04-cibercryme.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-4&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-4&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-4&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-4&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-4&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;04-cibercryme.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-4&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;04-cibercryme.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;05-freakshow-75-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#05-freakshow-75-bpm&quot; aria-label=&quot;Anchor link for: 05-freakshow-75-bpm&quot;&gt;#&lt;&#x2F;a&gt;05 - Freakshow (75 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-5&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;05-freakshow.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-5&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-5&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-5&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-5&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-5&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;05-freakshow.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-5&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;05-freakshow.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;06-ghoulsgrowl-75-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#06-ghoulsgrowl-75-bpm&quot; aria-label=&quot;Anchor link for: 06-ghoulsgrowl-75-bpm&quot;&gt;#&lt;&#x2F;a&gt;06 - Ghoulsgrowl (75 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;3&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-6&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;06-ghoulsgrowl.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-6&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-6&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-6&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-6&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-6&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;06-ghoulsgrowl.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-6&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;06-ghoulsgrowl.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;07-loungehounds-83-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#07-loungehounds-83-bpm&quot; aria-label=&quot;Anchor link for: 07-loungehounds-83-bpm&quot;&gt;#&lt;&#x2F;a&gt;07 - Loungehounds (83 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-7&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;07-loungehounds.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-7&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-7&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-7&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-7&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-7&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;07-loungehounds.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-7&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;07-loungehounds.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;08-hira-hira-84-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#08-hira-hira-84-bpm&quot; aria-label=&quot;Anchor link for: 08-hira-hira-84-bpm&quot;&gt;#&lt;&#x2F;a&gt;08 - Hira! Hira! (84 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-8&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;08-hirahira.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-8&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-8&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-8&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-8&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-8&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;08-hirahira.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-8&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;08-hirahira.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;09-scaredycat-77-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#09-scaredycat-77-bpm&quot; aria-label=&quot;Anchor link for: 09-scaredycat-77-bpm&quot;&gt;#&lt;&#x2F;a&gt;09 - Scaredycat (77 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-9&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;09-scaredycat.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-9&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-9&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-9&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-9&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-9&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;09-scaredycat.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-9&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;09-scaredycat.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;10-scatterbrain-94-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#10-scatterbrain-94-bpm&quot; aria-label=&quot;Anchor link for: 10-scatterbrain-94-bpm&quot;&gt;#&lt;&#x2F;a&gt;10 - Scatterbrain (94 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-10&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;10-scatterbrain.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-10&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-10&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-10&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-10&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-10&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;10-scatterbrain.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-10&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;10-scatterbrain.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;11-strongman-81-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#11-strongman-81-bpm&quot; aria-label=&quot;Anchor link for: 11-strongman-81-bpm&quot;&gt;#&lt;&#x2F;a&gt;11 - Strongman (81 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;3&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-11&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;11-strongman.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-11&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-11&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-11&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-11&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-11&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;11-strongman.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-11&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;11-strongman.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;12-incoming-85-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#12-incoming-85-bpm&quot; aria-label=&quot;Anchor link for: 12-incoming-85-bpm&quot;&gt;#&lt;&#x2F;a&gt;12 - Incoming (85 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-12&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;12-incoming.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-12&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-12&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-12&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-12&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-12&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;12-incoming.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-12&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;12-incoming.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;13-brainhurt-98-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#13-brainhurt-98-bpm&quot; aria-label=&quot;Anchor link for: 13-brainhurt-98-bpm&quot;&gt;#&lt;&#x2F;a&gt;13 - Brainhurt (98 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-13&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;13-brainhurt.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-13&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-13&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-13&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-13&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-13&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;13-brainhurt.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-13&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;13-brainhurt.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;14-birthright-73-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#14-birthright-73-bpm&quot; aria-label=&quot;Anchor link for: 14-birthright-73-bpm&quot;&gt;#&lt;&#x2F;a&gt;14 - Birthright (73 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-14&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;14-birthright.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-14&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-14&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-14&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-14&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-14&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;14-birthright.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-14&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;14-birthright.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;15-dropkick-90-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#15-dropkick-90-bpm&quot; aria-label=&quot;Anchor link for: 15-dropkick-90-bpm&quot;&gt;#&lt;&#x2F;a&gt;15 - Dropkick (90 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-15&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;15-dropkick.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-15&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-15&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-15&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-15&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-15&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;15-dropkick.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-15&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;15-dropkick.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;16-kentvcky-71-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#16-kentvcky-71-bpm&quot; aria-label=&quot;Anchor link for: 16-kentvcky-71-bpm&quot;&gt;#&lt;&#x2F;a&gt;16 - KENTVCKY (71 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;5&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-16&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;16-kentvcky.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-16&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-16&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-16&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-16&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-16&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;16-kentvcky.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-16&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;16-kentvcky.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;17-flatwheeler-64-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#17-flatwheeler-64-bpm&quot; aria-label=&quot;Anchor link for: 17-flatwheeler-64-bpm&quot;&gt;#&lt;&#x2F;a&gt;17 - Flatwheeler (64 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;3&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-17&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;17-flatwheeler.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-17&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-17&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-17&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-17&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-17&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;17-flatwheeler.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-17&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;17-flatwheeler.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;18-fringehead-93-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#18-fringehead-93-bpm&quot; aria-label=&quot;Anchor link for: 18-fringehead-93-bpm&quot;&gt;#&lt;&#x2F;a&gt;18 - Fringehead (93 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-18&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;18-fringehead.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-18&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-18&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-18&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-18&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-18&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;18-fringehead.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-18&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;18-fringehead.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;19-haketlove-79-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#19-haketlove-79-bpm&quot; aria-label=&quot;Anchor link for: 19-haketlove-79-bpm&quot;&gt;#&lt;&#x2F;a&gt;19 - #haketlove (79 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-19&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;19-haketlove.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-19&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-19&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-19&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-19&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-19&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;19-haketlove.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-19&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;19-haketlove.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;20-stockjock-85-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#20-stockjock-85-bpm&quot; aria-label=&quot;Anchor link for: 20-stockjock-85-bpm&quot;&gt;#&lt;&#x2F;a&gt;20 - Stockjock (85 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-20&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;20-stockjock.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-20&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-20&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-20&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-20&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-20&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;20-stockjock.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-20&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;20-stockjock.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;21-ladybugs-98-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#21-ladybugs-98-bpm&quot; aria-label=&quot;Anchor link for: 21-ladybugs-98-bpm&quot;&gt;#&lt;&#x2F;a&gt;21 - Ladybugs (98 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-21&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;21-ladybugs.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-21&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-21&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-21&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-21&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-21&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;21-ladybugs.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-21&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;21-ladybugs.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;22-dirtroad-74-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#22-dirtroad-74-bpm&quot; aria-label=&quot;Anchor link for: 22-dirtroad-74-bpm&quot;&gt;#&lt;&#x2F;a&gt;22 - Dirtroad (74 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-22&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;22-dirtroad.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-22&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-22&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-22&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-22&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-22&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;22-dirtroad.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-22&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;22-dirtroad.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;23-panoptikon-88-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#23-panoptikon-88-bpm&quot; aria-label=&quot;Anchor link for: 23-panoptikon-88-bpm&quot;&gt;#&lt;&#x2F;a&gt;23 - Panoptikon (88 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-23&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;23-panoptikon.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-23&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-23&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-23&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-23&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-23&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;23-panoptikon.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-23&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;23-panoptikon.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;24-snickertick-90-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#24-snickertick-90-bpm&quot; aria-label=&quot;Anchor link for: 24-snickertick-90-bpm&quot;&gt;#&lt;&#x2F;a&gt;24 - Snickertick (90 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-24&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;24-snickertick.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-24&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-24&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-24&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-24&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-24&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;24-snickertick.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-24&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;24-snickertick.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      source.connect(gainNode)
      source.connect(analyser)
      gainNode.connect(context.destination)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          if (analyser.getByteFrequencyData) {
            analyser.getByteFrequencyData(amplitude)
          }
        } else {
          if (analyser.getByteTimeDomainData) {
            analyser.getByteTimeDomainData(amplitude)
          }
        }

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        if (vizType === &#x27;td&#x27;) {
          &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
          &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Derivata</title>
		<published>2022-03-05T00:00:00+00:00</published>
		<updated>2022-03-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/music/derivata/" type="text/html"/>
		<id>https://spitlo.com/music/derivata/</id>
		<content type="html">&lt;p&gt;Derivata is a collaboration in the same vein as &lt;a href=&quot;&#x2F;music&#x2F;stromata&#x2F;&quot;&gt;Stromata&lt;&#x2F;a&gt;, but between Lolita Fatjo and me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rules&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rules&quot; aria-label=&quot;Anchor link for: rules&quot;&gt;#&lt;&#x2F;a&gt;Rules&lt;&#x2F;h2&gt;
&lt;p&gt;The rules for Derivata are the same as those for &lt;a href=&quot;&#x2F;music&#x2F;stromata&#x2F;&quot;&gt;Stromata&lt;&#x2F;a&gt;, basically no rules except that the next iteration must build upon the previous in some way.&lt;&#x2F;p&gt;
&lt;p&gt;The first version, &lt;code&gt;a-000.mp3&lt;&#x2F;code&gt; was sent by Lolita Fatjo on 2022-01-24 at 06:49 CET.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;files&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#files&quot; aria-label=&quot;Anchor link for: files&quot;&gt;#&lt;&#x2F;a&gt;Files&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;a-strain-2022&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-strain-2022&quot; aria-label=&quot;Anchor link for: a-strain-2022&quot;&gt;#&lt;&#x2F;a&gt;A Strain, 2022&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;File&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Sent&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;By&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Duration&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Snippet (size)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-000.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-24 06:49&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:08&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-000.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-001.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-28 23:58&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:21&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-001.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-002.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-02-20 15:19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:47&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-002.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-003.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-05 00:45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-003.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;A-004.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-13 16:48&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:33&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-004.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-005.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-30 07:02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-005.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-006.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-31 10:35&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-006.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-007.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-04-01 22:15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-007.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-008.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-04-15 19:57&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:33&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-008.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-009.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-04-26 12:36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:35&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-009.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-010.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-05-02 07:14&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:18&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-010.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-011.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-05-15 12:42&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:56&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-011.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-012.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-05-24 06:02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-012.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-013.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-06-19 00:26&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-013.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a_014.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-07-03 19:30&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a_014.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-015.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-07-26 16:50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-015.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stromata</title>
		<published>2021-03-26T00:00:00+00:00</published>
		<updated>2021-03-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/music/stromata/" type="text/html"/>
		<id>https://spitlo.com/music/stromata/</id>
		<content type="html">&lt;p&gt;Stromata is a collaboration born out of boredom. It’s a form of musical tennis where me and &lt;em&gt;kryptho&lt;&#x2F;em&gt; sends a piece of music back and forth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rules&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rules&quot; aria-label=&quot;Anchor link for: rules&quot;&gt;#&lt;&#x2F;a&gt;Rules&lt;&#x2F;h2&gt;
&lt;p&gt;Each iteration is a modified version of the previous version. The rules are pretty lax, basically:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You must use the file you receive in some way&lt;&#x2F;li&gt;
&lt;li&gt;You must return a consistently and predictably named, playable file&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Other than that, anything goes. Examples of possible modifications (on a scale from pedestrian to hard core):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Convert to ogg, then back to original format&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Play it on your computer, record it on your phone&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Add harmonica&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Add harmonica and lyrics&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Play it on your computer, record it to your phone while playing harmonica. Save as ogg&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Record the song to cassette, take the tape out and cut it to pieces. Glue it together again and put it back into the cassette. Record it (opionally saving it as ogg).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Print the file. Keep only the pages whose numbers are included in a fibonacci sequence (you might use an extra copy of page one). Scan these pages. Somehow make a song from that.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Using a magnetoencephalography helmet, record your reactions to the song. Convert those readings to frequencies. Convert the frequencies to actual tones. Record the tones. Add reverb.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are a lot of other modifications that are also possible&#x2F;desirable.&lt;&#x2F;p&gt;
&lt;p&gt;The first version, &lt;code&gt;a-000.wav&lt;&#x2F;code&gt; was sent on 2021-02-20 at 14:03 CET.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;b-strain&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#b-strain&quot; aria-label=&quot;Anchor link for: b-strain&quot;&gt;#&lt;&#x2F;a&gt;B Strain&lt;&#x2F;h2&gt;
&lt;p&gt;On January 1st, 2022, the B Strain was inititated by Kryptho.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;files&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#files&quot; aria-label=&quot;Anchor link for: files&quot;&gt;#&lt;&#x2F;a&gt;Files&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;b-strain-2022&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#b-strain-2022&quot; aria-label=&quot;Anchor link for: b-strain-2022&quot;&gt;#&lt;&#x2F;a&gt;B Strain, 2022&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;File&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Sent&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;By&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Duration&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Snippet (size)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;b-000.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-01 11:25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;b-000.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;b-001.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-14 16:46&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:09&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;b-001.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;a-strain-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-strain-2021&quot; aria-label=&quot;Anchor link for: a-strain-2021&quot;&gt;#&lt;&#x2F;a&gt;A Strain, 2021&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;File&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Sent&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;By&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Duration&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Snippet (size)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-000.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-20 14:03&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-000.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-001.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-20 17:38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-001.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-002.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-21 15:51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-002.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-003.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-21 19:51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-003.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-004.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-24 16:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-004.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-005.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-24 20:41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:21&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-005.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-006.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-01 16:49&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-006.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-007.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-02 17:38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-007.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-008.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-10 15:59&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:46&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-008.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-009.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-24 10:50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:58&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-009.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-010.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-04-06 20:53&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;05:47&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-010.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-011.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-04-07 18:56&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:56&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-011.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-012.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-04-21 21:15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-012.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-013.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-05-31 19:19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:29&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-013.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-014.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-07-06 22:47&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-014.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
</feed>
