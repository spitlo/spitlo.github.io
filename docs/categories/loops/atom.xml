<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Spitlo.com - Loops</title>
	<link href="https://spitlo.com/categories/loops/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://spitlo.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-10-01T00:00:00+00:00</updated>
	<id>https://spitlo.com/categories/loops/atom.xml</id>
	<entry xml:lang="en">
		<title>Looptober 2022</title>
		<published>2022-10-01T00:00:00+00:00</published>
		<updated>2022-10-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/music/looptober-2022/" type="text/html"/>
		<id>https://spitlo.com/music/looptober-2022/</id>
		<content type="html">&lt;p&gt;Looptober? Why not! I saw it mentioned somewhere, but I couldn’t really find any “rules” so I decided to just try to create one loop a day for the month of October as a way of getting to know the Elektron Syntakt. Below are the fruits of that labor.&lt;&#x2F;p&gt;
&lt;p&gt;NB: Since these are made to be played in a loop, they are not playable with the &lt;code&gt;:play&lt;&#x2F;code&gt; command. Just use the play buttons.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;01-duckboy-86-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#01-duckboy-86-bpm&quot; aria-label=&quot;Anchor link for: 01-duckboy-86-bpm&quot;&gt;#&lt;&#x2F;a&gt;01 - Duckboy (86 BPM)&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-1&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;01-duckboy.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    const context = new AudioContext()
    
    let source
    let isPlaying = false
    const avWidth = 200
    const avHeight = 40

    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-1&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-1&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-1&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)

    const loopWrapper = document.getElementById(&#x27;looper-1&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    canvasContext.fillStyle = &#x27;#ffffff&#x27;
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      const arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;01-duckboy.mp3&#x27;)
        .then(response =&gt; response.arrayBuffer())
      &#x2F;&#x2F; Assume file is loaded. Remove loading class.
      playButton.classList.remove(&#x27;loading&#x27;)
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      source = context.createBufferSource()
      source.connect(context.destination)

      if (typeof context.createScriptProcessor !== &#x27;undefined&#x27;) {
        const analyser = context.createAnalyser()
        const scriptProcessor = context.createScriptProcessor(1024, 1, 1)

        const amplitude = new Uint8Array(analyser.frequencyBinCount)

        source.connect(analyser)
        analyser.connect(scriptProcessor)
        scriptProcessor.connect(context.destination)

        scriptProcessor.onaudioprocess = () =&gt; {
          analyser.getByteTimeDomainData(amplitude)

          if (isPlaying) {
            requestAnimationFrame(() =&gt; {
              clearAvCanvas() &#x2F;&#x2F; or clearAvCanvas(true) to clear completely (no basesline)
              for (let i = 0; i &lt; amplitude.length; i++) {
                const ampValue = amplitude[i] &#x2F; 256
                const y = avHeight - (avHeight * ampValue) - 1
                canvasContext.fillRect(i, y, 1, 1)
              }
            })
          }
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      source.start(0)
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;02-grvyrdshft-72-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#02-grvyrdshft-72-bpm&quot; aria-label=&quot;Anchor link for: 02-grvyrdshft-72-bpm&quot;&gt;#&lt;&#x2F;a&gt;02 - Grvyrdshft (72 BPM)&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-2&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;02-grvyrdshft.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {
    const context = new AudioContext()
    
    let source
    let isPlaying = false
    const avWidth = 200
    const avHeight = 40

    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-2&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-2&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-2&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)

    const loopWrapper = document.getElementById(&#x27;looper-2&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    canvasContext.fillStyle = &#x27;#ffffff&#x27;
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      const arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;02-grvyrdshft.mp3&#x27;)
        .then(response =&gt; response.arrayBuffer())
      &#x2F;&#x2F; Assume file is loaded. Remove loading class.
      playButton.classList.remove(&#x27;loading&#x27;)
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      source = context.createBufferSource()
      source.connect(context.destination)

      if (typeof context.createScriptProcessor !== &#x27;undefined&#x27;) {
        const analyser = context.createAnalyser()
        const scriptProcessor = context.createScriptProcessor(1024, 1, 1)

        const amplitude = new Uint8Array(analyser.frequencyBinCount)

        source.connect(analyser)
        analyser.connect(scriptProcessor)
        scriptProcessor.connect(context.destination)

        scriptProcessor.onaudioprocess = () =&gt; {
          analyser.getByteTimeDomainData(amplitude)

          if (isPlaying) {
            requestAnimationFrame(() =&gt; {
              clearAvCanvas() &#x2F;&#x2F; or clearAvCanvas(true) to clear completely (no basesline)
              for (let i = 0; i &lt; amplitude.length; i++) {
                const ampValue = amplitude[i] &#x2F; 256
                const y = avHeight - (avHeight * ampValue) - 1
                canvasContext.fillRect(i, y, 1, 1)
              }
            })
          }
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      source.start(0)
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
</content>
	</entry>
</feed>
