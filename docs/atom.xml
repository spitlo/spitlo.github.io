<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Spitlo.com</title>
	<link href="https://spitlo.com/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://spitlo.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-10-01T00:00:00+00:00</updated>
	<id>https://spitlo.com/atom.xml</id>
	<entry xml:lang="en">
		<title>Looptober 2022</title>
		<published>2022-10-01T00:00:00+00:00</published>
		<updated>2022-10-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/music/looptober-2022/" type="text/html"/>
		<id>https://spitlo.com/music/looptober-2022/</id>
		<content type="html">&lt;p&gt;Looptober? Why not! I saw it mentioned somewhere, but I couldn’t really find any “rules” so I decided to interpret it literally. I’m creating one short loop a day for the month of October as a way of getting to know the Elektron Syntakt. Below are the fruits of that labor. &lt;&#x2F;p&gt;
&lt;p&gt;Success-o-meter: ~&lt;code&gt;68&lt;&#x2F;code&gt;% done. Two thirds officially &lt;del&gt;crushed&lt;&#x2F;del&gt; finished.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;mark class=&quot;arrow&quot;&gt;NB&lt;&#x2F;mark&gt; These are made to be played in a loop, but if you only want a quick peek they are still playable using the &lt;code&gt;:play&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;mark class=&quot;arrow&quot;&gt;NB2&lt;&#x2F;mark&gt; If you grow tired of the audio visualization, click it to switch to another type.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;mark class=&quot;arrow&quot;&gt;PROTIP&lt;&#x2F;mark&gt; The mute button only mutes when pressed, use it to add flair to your late night freestyle sessions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;01-duckboy-86-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#01-duckboy-86-bpm&quot; aria-label=&quot;Anchor link for: 01-duckboy-86-bpm&quot;&gt;#&lt;&#x2F;a&gt;01 - Duckboy (86 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-1&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;01-duckboy.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-1&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-1&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-1&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-1&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-1&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;01-duckboy.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-1&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;01-duckboy.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;02-grvyrdshft-72-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#02-grvyrdshft-72-bpm&quot; aria-label=&quot;Anchor link for: 02-grvyrdshft-72-bpm&quot;&gt;#&lt;&#x2F;a&gt;02 - Grvyrdshft (72 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-2&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;02-grvyrdshft.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-2&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-2&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-2&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-2&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-2&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;02-grvyrdshft.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-2&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;02-grvyrdshft.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;03-spacejoust-80-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#03-spacejoust-80-bpm&quot; aria-label=&quot;Anchor link for: 03-spacejoust-80-bpm&quot;&gt;#&lt;&#x2F;a&gt;03 - Spacejoust (80 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-3&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;03-spacejoust.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-3&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-3&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-3&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-3&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-3&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;03-spacejoust.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-3&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;03-spacejoust.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;04-cibercryme-89-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#04-cibercryme-89-bpm&quot; aria-label=&quot;Anchor link for: 04-cibercryme-89-bpm&quot;&gt;#&lt;&#x2F;a&gt;04 - Cibercryme (89 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-4&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;04-cibercryme.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-4&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-4&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-4&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-4&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-4&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;04-cibercryme.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-4&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;04-cibercryme.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;05-freakshow-75-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#05-freakshow-75-bpm&quot; aria-label=&quot;Anchor link for: 05-freakshow-75-bpm&quot;&gt;#&lt;&#x2F;a&gt;05 - Freakshow (75 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-5&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;05-freakshow.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-5&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-5&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-5&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-5&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-5&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;05-freakshow.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-5&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;05-freakshow.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;06-ghoulsgrowl-75-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#06-ghoulsgrowl-75-bpm&quot; aria-label=&quot;Anchor link for: 06-ghoulsgrowl-75-bpm&quot;&gt;#&lt;&#x2F;a&gt;06 - Ghoulsgrowl (75 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;3&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-6&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;06-ghoulsgrowl.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-6&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-6&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-6&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-6&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-6&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;06-ghoulsgrowl.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-6&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;06-ghoulsgrowl.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;07-loungehounds-83-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#07-loungehounds-83-bpm&quot; aria-label=&quot;Anchor link for: 07-loungehounds-83-bpm&quot;&gt;#&lt;&#x2F;a&gt;07 - Loungehounds (83 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-7&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;07-loungehounds.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-7&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-7&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-7&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-7&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-7&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;07-loungehounds.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-7&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;07-loungehounds.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;08-hira-hira-84-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#08-hira-hira-84-bpm&quot; aria-label=&quot;Anchor link for: 08-hira-hira-84-bpm&quot;&gt;#&lt;&#x2F;a&gt;08 - Hira! Hira! (84 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-8&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;08-hirahira.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-8&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-8&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-8&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-8&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-8&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;08-hirahira.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-8&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;08-hirahira.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;09-scaredycat-77-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#09-scaredycat-77-bpm&quot; aria-label=&quot;Anchor link for: 09-scaredycat-77-bpm&quot;&gt;#&lt;&#x2F;a&gt;09 - Scaredycat (77 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-9&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;09-scaredycat.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-9&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-9&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-9&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-9&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-9&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;09-scaredycat.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-9&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;09-scaredycat.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;10-scatterbrain-94-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#10-scatterbrain-94-bpm&quot; aria-label=&quot;Anchor link for: 10-scatterbrain-94-bpm&quot;&gt;#&lt;&#x2F;a&gt;10 - Scatterbrain (94 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-10&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;10-scatterbrain.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-10&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-10&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-10&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-10&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-10&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;10-scatterbrain.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-10&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;10-scatterbrain.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;11-strongman-81-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#11-strongman-81-bpm&quot; aria-label=&quot;Anchor link for: 11-strongman-81-bpm&quot;&gt;#&lt;&#x2F;a&gt;11 - Strongman (81 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;3&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-11&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;11-strongman.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-11&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-11&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-11&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-11&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-11&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;11-strongman.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-11&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;11-strongman.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;12-incoming-85-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#12-incoming-85-bpm&quot; aria-label=&quot;Anchor link for: 12-incoming-85-bpm&quot;&gt;#&lt;&#x2F;a&gt;12 - Incoming (85 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-12&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;12-incoming.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-12&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-12&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-12&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-12&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-12&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;12-incoming.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-12&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;12-incoming.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;13-brainhurt-98-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#13-brainhurt-98-bpm&quot; aria-label=&quot;Anchor link for: 13-brainhurt-98-bpm&quot;&gt;#&lt;&#x2F;a&gt;13 - Brainhurt (98 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-13&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;13-brainhurt.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-13&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-13&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-13&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-13&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-13&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;13-brainhurt.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-13&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;13-brainhurt.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;14-birthright-73-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#14-birthright-73-bpm&quot; aria-label=&quot;Anchor link for: 14-birthright-73-bpm&quot;&gt;#&lt;&#x2F;a&gt;14 - Birthright (73 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-14&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;14-birthright.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-14&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-14&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-14&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-14&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-14&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;14-birthright.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-14&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;14-birthright.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;15-dropkick-90-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#15-dropkick-90-bpm&quot; aria-label=&quot;Anchor link for: 15-dropkick-90-bpm&quot;&gt;#&lt;&#x2F;a&gt;15 - Dropkick (90 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-15&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;15-dropkick.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-15&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-15&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-15&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-15&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-15&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;15-dropkick.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-15&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;15-dropkick.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;16-kentvcky-71-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#16-kentvcky-71-bpm&quot; aria-label=&quot;Anchor link for: 16-kentvcky-71-bpm&quot;&gt;#&lt;&#x2F;a&gt;16 - KENTVCKY (71 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;5&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-16&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;16-kentvcky.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-16&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-16&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-16&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-16&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-16&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;16-kentvcky.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-16&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;16-kentvcky.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;17-flatwheeler-64-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#17-flatwheeler-64-bpm&quot; aria-label=&quot;Anchor link for: 17-flatwheeler-64-bpm&quot;&gt;#&lt;&#x2F;a&gt;17 - Flatwheeler (64 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;3&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-17&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;17-flatwheeler.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-17&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-17&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-17&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-17&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-17&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;17-flatwheeler.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-17&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;17-flatwheeler.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;18-fringehead-93-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#18-fringehead-93-bpm&quot; aria-label=&quot;Anchor link for: 18-fringehead-93-bpm&quot;&gt;#&lt;&#x2F;a&gt;18 - Fringehead (93 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-18&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;18-fringehead.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-18&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-18&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-18&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-18&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-18&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;18-fringehead.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-18&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;18-fringehead.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;19-haketlove-79-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#19-haketlove-79-bpm&quot; aria-label=&quot;Anchor link for: 19-haketlove-79-bpm&quot;&gt;#&lt;&#x2F;a&gt;19 - #haketlove (79 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-19&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;19-haketlove.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-19&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-19&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-19&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-19&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-19&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;19-haketlove.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-19&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;19-haketlove.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;20-stockjock-85-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#20-stockjock-85-bpm&quot; aria-label=&quot;Anchor link for: 20-stockjock-85-bpm&quot;&gt;#&lt;&#x2F;a&gt;20 - Stockjock (85 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-20&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;20-stockjock.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-20&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-20&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-20&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-20&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-20&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;20-stockjock.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-20&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;20-stockjock.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
&lt;h2 id=&quot;21-ladybugs-98-bpm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#21-ladybugs-98-bpm&quot; aria-label=&quot;Anchor link for: 21-ladybugs-98-bpm&quot;&gt;#&lt;&#x2F;a&gt;21 - Ladybugs (98 BPM) &lt;span class=&quot;timesig &quot;&gt;&lt;sup&gt;4&lt;&#x2F;sup&gt;&#x2F;&lt;sub&gt;4&lt;&#x2F;sub&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;div id=&quot;looper-21&quot; class=&quot;looper &quot;&gt;
  &lt;noscript&gt;
    &lt;audio loop controls src=&quot;&amp;#x2F;audio&amp;#x2F;looptober&amp;#x2F;2022&amp;#x2F;21-ladybugs.mp3&quot;&gt;&lt;&#x2F;audio&gt;
  &lt;&#x2F;noscript&gt;
&lt;&#x2F;div&gt;

&lt;script type=&quot;module&quot;&gt;
  (async () =&gt; {    
    let context
    let gainNode
    let source
    let isPlaying = false
    let vizType = &#x27;td&#x27;
    const avWidth = 200
    const avHeight = 40
    const avColors = [
      &#x27;#74edc4&#x27;, &#x2F;&#x2F; aquamarine
      &#x27;#8bd1cd&#x27;, &#x2F;&#x2F; lightSeagreen
      &#x27;#aa9f9f&#x27;, &#x2F;&#x2F; gray
      &#x27;#b1b098&#x27;, &#x2F;&#x2F; dirtyYellow
      &#x27;#b55603&#x27;, &#x2F;&#x2F; orange
      &#x27;#dfcece&#x27;, &#x2F;&#x2F; lightBrown
      &#x27;#e30000&#x27;, &#x2F;&#x2F; red
      &#x27;#ecffea&#x27;, &#x2F;&#x2F; honeydew
      &#x27;#fff1f1&#x27;, &#x2F;&#x2F; mutedPink
      &#x27;#fffcfc&#x27;, &#x2F;&#x2F; white
      &#x27;#fffffb&#x27;, &#x2F;&#x2F; lightWhite
    ]

    &#x2F;&#x2F; Set up player interface
    const playButton = document.createElement(&#x27;button&#x27;)
    playButton.id = &#x27;play-21&#x27;
    playButton.innerHTML = `
  
  &lt;span class=&quot;icon play small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    playButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Play loop&#x27;)
    
    const stopButton = document.createElement(&#x27;button&#x27;)
    stopButton.id = &#x27;stop-21&#x27;
    stopButton.innerHTML = `
  
  &lt;span class=&quot;icon stop small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M6 5h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    stopButton.classList.add(&#x27;stop&#x27;)
    stopButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Stop loop&#x27;)
    
    const avCanvas = document.createElement(&#x27;canvas&#x27;)
    avCanvas.id = &#x27;av-21&#x27;
    avCanvas.setAttribute(&#x27;width&#x27;, avWidth)
    avCanvas.setAttribute(&#x27;height&#x27;, avHeight)
    avCanvas.setAttribute(&#x27;aria-label&#x27;, &#x27;Audio visualizer&#x27;)
    avCanvas.onclick = () =&gt; {
      if (isPlaying) {
        if (vizType === &#x27;fr&#x27;) {
          vizType = &#x27;td&#x27;
        } else {
          vizType = &#x27;fr&#x27;
        } 
      }
    }
    
    const muteButton = document.createElement(&#x27;button&#x27;)
    muteButton.id = &#x27;mute-21&#x27;
    muteButton.innerHTML = `
  
  &lt;span class=&quot;icon mute small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M5.889 16H2a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h3.889l5.294-4.332a.5.5 0 0 1 .817.387v15.89a.5.5 0 0 1-.817.387L5.89 16zm14.525-4l3.536 3.536-1.414 1.414L19 13.414l-3.536 3.536-1.414-1.414L17.586 12 14.05 8.464l1.414-1.414L19 10.586l3.536-3.536 1.414 1.414L20.414 12z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    muteButton.classList.add(&#x27;mute&#x27;)
    muteButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Mute loop&#x27;)
    muteButton.addEventListener(&#x27;mousedown&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(0, context.currentTime)
      }
    })
    muteButton.addEventListener(&#x27;mouseup&#x27;, () =&gt; {
      if (source &amp;&amp; gainNode) {
        gainNode.gain.setValueAtTime(1, context.currentTime)
      }
    })
    
    const downloadButton = document.createElement(&#x27;a&#x27;)
    downloadButton.id = &#x27;download-21&#x27;
    downloadButton.innerHTML = `
  
  &lt;span class=&quot;icon download small&quot;&gt;
    
    
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;path fill=&quot;none&quot; d=&quot;M0 0h24v24H0z&quot;&#x2F;&gt;&lt;path d=&quot;M4 19h16v-7h2v8a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-8h2v7zM14 9h5l-7 7-7-7h5V3h4v6z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;span&gt;
`
    downloadButton.classList.add(&#x27;download&#x27;)
    downloadButton.setAttribute(&#x27;aria-label&#x27;, &#x27;Download loop&#x27;)
    downloadButton.setAttribute(&#x27;download&#x27;, &#x27;&#x27;)
    downloadButton.setAttribute(&#x27;href&#x27;, &#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;21-ladybugs.mp3&#x27;)

    const loopWrapper = document.getElementById(&#x27;looper-21&#x27;)

    loopWrapper.appendChild(playButton)
    loopWrapper.appendChild(stopButton)
    loopWrapper.appendChild(avCanvas)
    loopWrapper.appendChild(muteButton)
    loopWrapper.appendChild(downloadButton)

    &#x2F;&#x2F; Get the canvas context for the audio visualizer
    const canvasContext = avCanvas.getContext(&#x27;2d&#x27;)
    &#x2F;&#x2F; And paint the baseline
    const clearAvCanvas = (baseline = true) =&gt; {
      canvasContext.fillStyle =
        document.querySelector(&#x27;html&#x27;).classList.contains(&#x27;light&#x27;)
          ? &#x27;#2d3238&#x27;
          : &#x27;#fffffb&#x27;
      canvasContext.clearRect(0, 0, avWidth, avHeight)
      if (baseline) {
        canvasContext.fillRect(0, avHeight &#x2F; 2, avWidth, 1)
      }
    }
    clearAvCanvas()

    playButton.addEventListener(&#x27;click&#x27;, async () =&gt; {
      &#x2F;&#x2F; Initialize audio
      context = new AudioContext()
      gainNode = context.createGain()
      &#x2F;&#x2F; Disable play and set loading class. We don’t want people to start
      &#x2F;&#x2F; multiple downloads&#x2F;plays accidentally.
      playButton.classList.add(&#x27;loading&#x27;)
      playButton.setAttribute(&#x27;disabled&#x27;, &#x27;disabled&#x27;)
      isPlaying = true

      &#x2F;&#x2F; Fetch audio file. Error handling? Perhaps later.
      let arrayBuffer
      try {
        arrayBuffer = await fetch(&#x27;https:&#x2F;&#x2F;spitlo.com&#x2F;audio&#x2F;looptober&#x2F;2022&#x2F;21-ladybugs.mp3&#x27;)
          .then(response =&gt; response.arrayBuffer())
        &#x2F;&#x2F; Assume file is loaded. Remove loading class.
        playButton.classList.remove(&#x27;loading&#x27;)
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;loading&#x27;)
        return
      }
      
      &#x2F;&#x2F; Ok, do the buffer magic.
      const buffer = await context.decodeAudioData(arrayBuffer)
      const analyser = context.createAnalyser()
      source = context.createBufferSource()
      gainNode.connect(context.destination)
      source.connect(gainNode)
      source.connect(analyser)

      const amplitude = new Uint8Array(analyser.frequencyBinCount)

      const renderVisualization = () =&gt; {
        if (isPlaying) {
          requestAnimationFrame(renderVisualization)
        }

        if (vizType === &#x27;fr&#x27;) {
          analyser.getByteFrequencyData(amplitude)
        } else {
          analyser.getByteTimeDomainData(amplitude)
        }        

        clearAvCanvas(vizType === &#x27;fr&#x27; ? false : true)
        &#x2F;&#x2F; &quot;Shuffle&quot; colors array. This will do for now, but we could also use
        &#x2F;&#x2F; `ampValue` to set the color, higher -&gt; red, lower -&gt; white&#x2F;green.
        if (vizType === &#x27;td&#x27;) {
          avColors.push(avColors.shift())
        }
        for (let i = 0; i &lt; amplitude.length; i++) {
          const ampValue = amplitude[i] &#x2F; (vizType === &#x27;fr&#x27; ? 320 : 256)
          const y = avHeight - (avHeight * ampValue) - 1
          &#x2F;&#x2F; This is probably not very performant :&#x2F;
          if (vizType === &#x27;td&#x27;) {
            canvasContext.fillStyle = `${avColors[0]}40`
            canvasContext.fillRect(i - 1, y - 1, 3, 3)
          }
          canvasContext.fillStyle = &#x27;#74edc4&#x27;
          canvasContext.fillRect(i, y, 1, 1)
        }
      }

      source.buffer = buffer
      source.loop = true

      playButton.classList.add(&#x27;playing&#x27;)
      try {
        source.start(0)
        renderVisualization()
      } catch(error) {
        console.error(&#x27;Could not load audio&#x27;, error)
        playButton.classList.remove(&#x27;playing&#x27;)
      } 
    })
    
    stopButton.addEventListener(&#x27;click&#x27;, () =&gt; {
      if (source) {
        playButton.classList.remove(&#x27;loading&#x27;, &#x27;playing&#x27;)
        playButton.removeAttribute(&#x27;disabled&#x27;)
        isPlaying = false
        requestAnimationFrame(clearAvCanvas)

        source.stop(0)
      }
    })
  })()

&lt;&#x2F;script&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Morsh</title>
		<published>2022-03-23T00:00:00+00:00</published>
		<updated>2022-03-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/morsh/" type="text/html"/>
		<id>https://spitlo.com/code/morsh/</id>
		<content type="html">&lt;p&gt;A Bash script to decode&#x2F;encode morse code. Slightly buggy and very, very slow. Could also be used as an extremely unpleasant way to uppercase text.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;#&lt;&#x2F;a&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Just put the &lt;code&gt;morsh&lt;&#x2F;code&gt; script in your &lt;code&gt;~&#x2F;bin&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;fancy-installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fancy-installation&quot; aria-label=&quot;Anchor link for: fancy-installation&quot;&gt;#&lt;&#x2F;a&gt;Fancy installation&lt;&#x2F;h2&gt;
&lt;p&gt;Clone the repo and put a symlink to the &lt;code&gt;morsh&lt;&#x2F;code&gt; script in your &lt;code&gt;~&#x2F;bin&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage-examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage-examples&quot; aria-label=&quot;Anchor link for: usage-examples&quot;&gt;#&lt;&#x2F;a&gt;Usage examples&lt;&#x2F;h2&gt;
&lt;p&gt;Quickly decode a message from some ancient online puzzle game:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;.&#x2F;morsh ...- --- --- -.. --- --- &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; .- --. .. -.-.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awkwardly uppercase a sentence (removing punctuation, diacritics and fluff in the process):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fffd87;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;I Have No Mouth, and I Must Scream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;morsh -e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;morsh -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Turn Crime and Punishment into something you can reliably broadcast to your entire neighborhood with a simple signal horn and some patience:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;curl https:&#x2F;&#x2F;gutenberg.org&#x2F;files&#x2F;2554&#x2F;2554-0.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;morsh --encode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;less
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Derivata</title>
		<published>2022-03-05T00:00:00+00:00</published>
		<updated>2022-03-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/music/derivata/" type="text/html"/>
		<id>https://spitlo.com/music/derivata/</id>
		<content type="html">&lt;p&gt;Derivata is a collaboration in the same vein as &lt;a href=&quot;&#x2F;music&#x2F;stromata&#x2F;&quot;&gt;Stromata&lt;&#x2F;a&gt;, but between Lolita Fatjo and me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rules&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rules&quot; aria-label=&quot;Anchor link for: rules&quot;&gt;#&lt;&#x2F;a&gt;Rules&lt;&#x2F;h2&gt;
&lt;p&gt;The rules for Derivata are the same as those for &lt;a href=&quot;&#x2F;music&#x2F;stromata&#x2F;&quot;&gt;Stromata&lt;&#x2F;a&gt;, basically no rules except that the next iteration must build upon the previous in some way.&lt;&#x2F;p&gt;
&lt;p&gt;The first version, &lt;code&gt;a-000.mp3&lt;&#x2F;code&gt; was sent by Lolita Fatjo on 2022-01-24 at 06:49 CET.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;files&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#files&quot; aria-label=&quot;Anchor link for: files&quot;&gt;#&lt;&#x2F;a&gt;Files&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;a-strain-2022&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-strain-2022&quot; aria-label=&quot;Anchor link for: a-strain-2022&quot;&gt;#&lt;&#x2F;a&gt;A Strain, 2022&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;File&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Sent&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;By&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Duration&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Snippet (size)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-000.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-24 06:49&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:08&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-000.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-001.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-28 23:58&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:21&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-001.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-002.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-02-20 15:19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:47&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-002.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-003.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-05 00:45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-003.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;A-004.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-13 16:48&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:33&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-004.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-005.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-30 07:02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-005.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-006.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-03-31 10:35&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-006.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-007.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-04-01 22:15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-007.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-008.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-04-15 19:57&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:33&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-008.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-009.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-04-26 12:36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:35&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-009.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-010.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-05-02 07:14&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:18&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-010.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-011.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-05-15 12:42&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;02:56&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-011.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-012.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-05-24 06:02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-012.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-013.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-06-19 00:26&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-013.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a_014.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-07-03 19:30&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;L.F.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a_014.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-015.mp3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-07-26 16:50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;derivata&#x2F;snippets&#x2F;a-015.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Oxygen Chase</title>
		<published>2021-05-06T00:00:00+00:00</published>
		<updated>2021-05-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/games/oxygen-chase/" type="text/html"/>
		<id>https://spitlo.com/games/oxygen-chase/</id>
		<content type="html">&lt;p&gt;This is an experimental game using &lt;code&gt;text-engine&lt;&#x2F;code&gt; by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;okaybenji&#x2F;&quot;&gt;Benji Kay&lt;&#x2F;a&gt;. It’s experimental mostly in the sense that I have never made a game before.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Karakter</title>
		<published>2021-04-06T00:00:00+00:00</published>
		<updated>2021-04-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/karakter/" type="text/html"/>
		<id>https://spitlo.com/code/karakter/</id>
		<content type="html">&lt;p&gt;Karakter is a Bash script that takes text input (either from a pipe, as plain text arguments or as a file) and adds a little character to the text by substituting visually similar glyphs for letters a-z and A-Z. I wrote it because I wanted to come up with a pretty basic cli that I could then convert to other languages that I’ve been wanting to try out, like &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.adaic.org&#x2F;&quot;&gt;Ada&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fortran-lang.org&#x2F;&quot;&gt;Fortran&lt;&#x2F;a&gt;. I encourage everyone to not hold their breath for that though – at the moment there is a working version in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vlang.io&quot;&gt;V&lt;&#x2F;a&gt; and work-in-progress versions in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nim-lang.org&#x2F;&quot;&gt;Nim&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;&quot;&gt;Zig&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There is a default style that’s sort of a kitchen sink mix of very different looking glyphs, and then there’s four less eclectic styles, &lt;code&gt;¢џБ≡┎pμ∩κ&lt;&#x2F;code&gt;, &lt;code&gt;ƒάїгψłάľє&lt;&#x2F;code&gt;, &lt;code&gt;LŌŪĐMŌŪṪH&lt;&#x2F;code&gt; and &lt;code&gt;₥0₦€¥₸₳£₭&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most glyphs are chosen from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ehmicky&#x2F;cross-platform-terminal-characters&quot;&gt;this list&lt;&#x2F;a&gt; of “All the characters that work on most terminals” so they should work on most terminals – the exception being the set “Moneytalk” which is made up entirely of currency symbols (plus &lt;code&gt;1&lt;&#x2F;code&gt; and &lt;code&gt;0&lt;&#x2F;code&gt;, of course) and is not guaranteed to work everywhere.&lt;&#x2F;p&gt;
&lt;p&gt;There are some other flags, but the project readme has more information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage-examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage-examples&quot; aria-label=&quot;Anchor link for: usage-examples&quot;&gt;#&lt;&#x2F;a&gt;Usage examples&lt;&#x2F;h2&gt;
&lt;p&gt;Generate a mildly elvish version of your name for an email signature using the Bash version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;bash&#x2F;karakter --md --ft John Doe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Turn A Tale of Two Cities into a cyberpunk novel using the V version and read it comfortably in your terminal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;curl https:&#x2F;&#x2F;www.gutenberg.org&#x2F;files&#x2F;98&#x2F;98-0.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;s&#x2F;one thousand seven&#x2F;two thousand seven&#x2F;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;tr a-z A-Z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;v&#x2F;karakter -o md -s cp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;less
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;output-examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#output-examples&quot; aria-label=&quot;Anchor link for: output-examples&quot;&gt;#&lt;&#x2F;a&gt;Output examples&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;input-text&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#input-text&quot; aria-label=&quot;Anchor link for: input-text&quot;&gt;#&lt;&#x2F;a&gt;Input text&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output-text-obfuscation-level-low-default-style&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#output-text-obfuscation-level-low-default-style&quot; aria-label=&quot;Anchor link for: output-text-obfuscation-level-low-default-style&quot;&gt;#&lt;&#x2F;a&gt;Output text, obfuscation level low, default style&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;It ŵas thє beșt оf timєs, їt was thє worst of times, it waș the αge of wisdom, it was the ąge of foolїshness, it was the epoch of belief, iț ώas łhe epо¢ђ of incredulity, it шas the seąson of Light, it was the seasфη of Đarkness, it was the șpring of hope, it waș țhe winter of despair, we ђαd everything beforє us, we haď nothing before us, ŵe werє a11 going dire¢t to Heaven, we werє all going dїrёct tћe other way – in shoѓt, the pєriod was so fаr 1ike the present period, that some of its nфisiest authoгiłies iηsisted оn ițs bєing recёived, for gooď оr for evїl, in țhe șuperlative degгeё of comparison only.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output-text-obfuscation-level-medium-cyberpunk-style&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#output-text-obfuscation-level-medium-cyberpunk-style&quot; aria-label=&quot;Anchor link for: output-text-obfuscation-level-medium-cyberpunk-style&quot;&gt;#&lt;&#x2F;a&gt;Output text, obfuscation level medium, cyberpunk style&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;It ш@s the bєsŁ of tim≡$, it w@s tHe шоrst of Łim≡$, it шas ŁH≡ аg≡ o⌠ w¡$ďøm, ī┪ ш@s thє ag≡ оf fo●lishπes$, iŁ шas Łhe ≡pø¢H ●f belıef, iŁ ша$ tHє ep●ch о⌠ :nc┍єďulity, īŁ wα$ ┪h≡ $ea$o∩ оf Ľi9ht, īŁ w@$ ŁHe sє@$■Π of Daяκπє$$, :Ł wα$ tHє $p┎īn9 о⌠ høp≡, iŁ ш@s tHe wint≡r of ďєsp@ıя, шє Hαd e▼eгy┪h¡∩g bє⌠оre u$, we Hαď ∩o┪H¡Πg 6єfoгє u$, шe шe┎e αll go¡π9 ďi┎≡ct ┪o He@▼en, we шє┍e a1l 9■iΠg ďir≡ct ŁHe o┪her ш@џ – ¡n $Hort, thє p≡г¡●ď was $o fаr lıke the p┎≡$e∩t pe┍ioď, tHat s●mє ■f it$ πoisie$┪ aμ┪Hor:t:≡s ins:steď ●n its b≡ın9 гec≡ived, fø┎ 9ø●d оr ⌠●r ≡▼ı1, in Łh≡ sup≡гlα┪īvє ďegr≡є о⌠ ¢ompaгıson o∩1y.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output-text-obfuscation-level-high-fairytale-style&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#output-text-obfuscation-level-high-fairytale-style&quot; aria-label=&quot;Anchor link for: output-text-obfuscation-level-high-fairytale-style&quot;&gt;#&lt;&#x2F;a&gt;Output text, obfuscation level high, fairytale style&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Ϊṫ шάș ṫђё вєșṫ ºḟ łΐṁєș, ΐł шάș łћё ώºѓșṫ фƒ țΐṁēș, ΐț ώάș ṫђё ąġē σƒ шΐșδσṁ, ΐṫ шάș ṫђє ąġё σƒ ƒооļїșћηєșș, їł шąș łђё єpºςђ ºƒ Бēļїēƒ, їṫ шąș ṫћё єpоςђ фḟ їņςѓєδΰľїłψ, їł ŵąș łђē șєąșфņ фḟ Ļїġђț, ΐł ŵąș łђё șёąșфņ ºḟ Ďąѓkņēșș, їł ώάș țђē șpгїηġ фḟ ђºpē, їṫ ŵąș ṫђє ŵїņțєѓ σḟ ďєșpαΐг, ώё ћαḋ ēνёѓџłћΐñġ вēƒσгє ΰș, шё ђάđ ησṫђΐηġ ḃёƒºѓё υș, ώё ŵєгē αļľ ġºїņġ ďΐѓєςł țф нєάνєη, ώє шєѓē άľļ ġфїņġ ďΐѓєςț ṫћē фṫћёг шąψ – ΐņ șћσѓṫ, ṫђē pёѓΐºđ ŵάș șº ƒάѓ ľΐkē țђё pгёșєñṫ pёѓїоδ, ṫћάł șºṁє оḟ ΐțș ñºΐșїєșł ąΰțћфѓїṫΐєș ΐñșїșłēď ºņ ΐłș Бєїņġ ѓēςёΐνēđ, ḟог ġºфđ σѓ ƒºг ēνΐľ, їη ṫђє șΰpєѓľάṫΐνē δєġѓєё ºḟ ςºṁpαгΐșоñ оņľψ.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output-text-obfuscation-level-high-loudmouth-style&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#output-text-obfuscation-level-high-loudmouth-style&quot; aria-label=&quot;Anchor link for: output-text-obfuscation-level-high-loudmouth-style&quot;&gt;#&lt;&#x2F;a&gt;Output text, obfuscation level high, loudmouth style&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;ĪṪ ШĀȘ ṪHĒ ḂĒȘṪ ŌF ṪIMĒȘ, IṪ ШĀȘ ṪHĒ ШŌŔȘṪ ŌF ṪIMĒȘ, IṪ ШĀȘ ṪHĒ ĀGĒ ŌF ШIȘĐŌM, IṪ ШĀȘ ṪHĒ ĀGĒ ŌF FŌŌLIȘHПĒȘȘ, IṪ ШĀȘ ṪHĒ ĒРŌČH ŌF ḂĒLIĒF, IṪ ШĀȘ ṪHĒ ĒРŌČH ŌF IПČŔĒĐŪLIṪЏ, IṪ ШĀȘ ṪHĒ ȘĒĀȘŌП ŌF LIGHṪ, IṪ ШĀȘ ṪHĒ ȘĒĀȘŌП ŌF ĐĀŔЌПĒȘȘ, IṪ ШĀȘ ṪHĒ ȘРŔIПG ŌF HŌРĒ, IṪ ШĀȘ ṪHĒ ШIПṪĒŔ ŌF ĐĒȘРĀIŔ, ШĒ HĀĐ ĒVĒŔЏṪHIПG ḂĒFŌŔĒ ŪȘ, ШĒ HĀĐ ПŌṪHIПG ḂĒFŌŔĒ ŪȘ, ШĒ ШĒŔĒ ĀLL GŌIПG ĐIŔĒČṪ ṪŌ ĦĒĀVĒП, ШĒ ШĒŔĒ ĀLL GŌIПG ĐIŔĒČṪ ṪHĒ ŌṪHĒŔ ШĀЏ – IП ȘHŌŔṪ, ṪHĒ РĒŔIŌĐ ШĀȘ ȘŌ FĀŔ LIЌĒ ṪHĒ РŔĒȘĒПṪ РĒŔIŌĐ, ṪHĀṪ ȘŌMĒ ŌF IṪȘ ПŌIȘIĒȘṪ ĀŪṪHŌŔIṪIĒȘ IПȘIȘṪĒĐ ŌП IṪȘ ḂĒIПG ŔĒČĒIVĒĐ, FŌŔ GŌŌĐ ŌŔ FŌŔ ĒVIL, IП ṪHĒ ȘŪРĒŔLĀṪIVĒ ĐĒGŔĒĒ ŌF ČŌMРĀŔIȘŌП ŌПLЏ. 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output-text-obfuscation-level-high-moneytalk-style&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#output-text-obfuscation-level-high-moneytalk-style&quot; aria-label=&quot;Anchor link for: output-text-obfuscation-level-high-moneytalk-style&quot;&gt;#&lt;&#x2F;a&gt;Output text, obfuscation level high, moneytalk style&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;1₮ ₩₳$ ₺₶€ ฿€$₸ 0₣ ₮1₥€₷, 1₸ ₩₳$ ₺₶€ ₩0₹₷₺ 0₣ ₸1₥€$, 1₺ ₩₳$ ₸₶€ ₳₲€ 0₣ ₩1$₫0₥, 1₺ ₩₳$ ₺₶€ ₳₲€ 0₣ ₣00£1₷₶₪€₷$, 1₮ ₩₳$ ₸₶€ €₱0₵₶ 0₣ ৳€£1€₣, 1₸ ₩₳$ ₺₶€ €₱0₵₶ 0₣ 1₪₵₹€₫U£1₮¥, 1₺ ₩₳$ ₮₶€ ₷€₳₷0₪ 0₣ £1₲₶₸, 1₮ ₩₳₷ ₸₶€ ₷€₳₷0₪ 0₣ ₫₳₹₭₪€$$, 1₮ ₩₳$ ₮₶€ $₽₹1₦₲ 0₣ ₶0₱€, 1₮ ₩₳$ ₸₶€ ₩1₦₸€₹ 0₣ ₫€$₱₳1₹, ₩€ ₶₳₫ €V€₹¥₸₶1₦₲ ฿€₣0₹€ U$, ₩€ ₶₳₫ ₪0₺₶1₦₲ ৳€₣0₹€ U$, ₩€ ₩€₹€ ₳££ ₲01₪₲ ₫1₹€₵₺ ₸0 ₶€₳V€₦, ₩€ ₩€₹€ ₳££ ₲01₪₲ ₫1₹€₡₸ ₮₶€ 0₸₶€₹ ₩₳¥ – 1₪ $₶0₹₸, ₸₶€ ₽€₹10₫ ₩₳₷ ₷0 ₣₳₹ £1₭€ ₺₶€ ₽₹€₷€₪₮ ₱€₹10₫, ₸₳₮ $0₥€ 0₣ 1₸$ ₦01$1€$₮ ₳U₸₶0₹1₸1€$ 1₦₷1$₮€₫ 0₦ 1₸₷ ৳€1₦₲ ₹€₵€1V€₫, ₣0₹ ₲00₫ 0₹ ₣0₹ €V1£, 1₪ ₮₶€ ₷U₽€₹£₳₸1V€ ₫€₲₹€€ 0₣ ₡0₥₱₳₹1$0₦ 0₪£¥.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Snippetizer</title>
		<published>2021-03-26T00:00:00+00:00</published>
		<updated>2021-03-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/snippetizer/" type="text/html"/>
		<id>https://spitlo.com/code/snippetizer/</id>
		<content type="html">&lt;p&gt;I made &lt;code&gt;snippetizer&lt;&#x2F;code&gt; to be able to quickly produce snippets of the material from &lt;a href=&quot;&#x2F;music&#x2F;stromata&quot;&gt;Stromata&lt;&#x2F;a&gt;. It uses &lt;code&gt;ffmpeg&lt;&#x2F;code&gt; and &lt;code&gt;ffprobe&lt;&#x2F;code&gt; and takes a few arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;  [start|middle|end]    What part of the file you want to snippet.
&lt;&#x2F;span&gt;&lt;span&gt;                        Defaults to &amp;#39;middle&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;  [&amp;lt;any integer&amp;gt;]       Snippet length in seconds.
&lt;&#x2F;span&gt;&lt;span&gt;                        Defaults to &amp;#39;30&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;  [-o&#x2F;--ogg]            Use ogg as output format instead of mp3.
&lt;&#x2F;span&gt;&lt;span&gt;  [-n&#x2F;--nofade]         Don’t fade in and out.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If no arguments are supplied, it creates a 30 second mp3 snippet from the middle of a file, with 2 second fade-in and 3 second fade-out.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stromata</title>
		<published>2021-03-26T00:00:00+00:00</published>
		<updated>2021-03-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/music/stromata/" type="text/html"/>
		<id>https://spitlo.com/music/stromata/</id>
		<content type="html">&lt;p&gt;Stromata is a collaboration born out of boredom. It’s a form of musical tennis where me and &lt;em&gt;kryptho&lt;&#x2F;em&gt; sends a piece of music back and forth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rules&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rules&quot; aria-label=&quot;Anchor link for: rules&quot;&gt;#&lt;&#x2F;a&gt;Rules&lt;&#x2F;h2&gt;
&lt;p&gt;Each iteration is a modified version of the previous version. The rules are pretty lax, basically:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You must use the file you receive in some way&lt;&#x2F;li&gt;
&lt;li&gt;You must return a consistently and predictably named, playable file&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Other than that, anything goes. Examples of possible modifications (on a scale from pedestrian to hard core):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Convert to ogg, then back to original format&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Play it on your computer, record it on your phone&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Add harmonica&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Add harmonica and lyrics&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Play it on your computer, record it to your phone while playing harmonica. Save as ogg&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Record the song to cassette, take the tape out and cut it to pieces. Glue it together again and put it back into the cassette. Record it (opionally saving it as ogg).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Print the file. Keep only the pages whose numbers are included in a fibonacci sequence (you might use an extra copy of page one). Scan these pages. Somehow make a song from that.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Using a magnetoencephalography helmet, record your reactions to the song. Convert those readings to frequencies. Convert the frequencies to actual tones. Record the tones. Add reverb.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are a lot of other modifications that are also possible&#x2F;desirable.&lt;&#x2F;p&gt;
&lt;p&gt;The first version, &lt;code&gt;a-000.wav&lt;&#x2F;code&gt; was sent on 2021-02-20 at 14:03 CET.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;b-strain&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#b-strain&quot; aria-label=&quot;Anchor link for: b-strain&quot;&gt;#&lt;&#x2F;a&gt;B Strain&lt;&#x2F;h2&gt;
&lt;p&gt;On January 1st, 2022, the B Strain was inititated by Kryptho.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;files&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#files&quot; aria-label=&quot;Anchor link for: files&quot;&gt;#&lt;&#x2F;a&gt;Files&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;b-strain-2022&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#b-strain-2022&quot; aria-label=&quot;Anchor link for: b-strain-2022&quot;&gt;#&lt;&#x2F;a&gt;B Strain, 2022&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;File&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Sent&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;By&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Duration&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Snippet (size)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;b-000.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-01 11:25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;b-000.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;b-001.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2022-01-14 16:46&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:09&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;b-001.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;a-strain-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-strain-2021&quot; aria-label=&quot;Anchor link for: a-strain-2021&quot;&gt;#&lt;&#x2F;a&gt;A Strain, 2021&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;File&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Sent&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;By&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Duration&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Snippet (size)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-000.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-20 14:03&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-000.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-001.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-20 17:38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-001.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-002.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-21 15:51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-002.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-003.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-21 19:51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-003.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-004.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-24 16:27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-004.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-005.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-02-24 20:41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:21&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-005.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-006.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-01 16:49&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-006.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-007.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-02 17:38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-007.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-008.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-10 15:59&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:46&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-008.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-009.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-03-24 10:50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:58&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-009.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-010.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-04-06 20:53&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;05:47&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-010.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-011.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-04-07 18:56&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:56&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-011.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-012.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-04-21 21:15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;04:23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-012.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-013.flac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-05-31 19:19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;kryptho&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:29&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-013.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (721 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;a-014.wav&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2021-07-06 22:47&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;spitlo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;03:28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;files.mefirst.se&#x2F;stromata&#x2F;snippets&#x2F;a-014.mp3&quot;&gt;mp3&lt;&#x2F;a&gt; (722 KB)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rotnot</title>
		<published>2020-12-06T00:00:00+00:00</published>
		<updated>2020-12-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/rotnot/" type="text/html"/>
		<id>https://spitlo.com/code/rotnot/</id>
		<content type="html">&lt;p&gt;Rotnot tries to figure out the notes of sound samples based on their filename, and save that note as meta data in the file.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment it works on a bunch of multi sampled instruments I had available, where the filenames were either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Note+octave (&lt;code&gt;a#4.wav&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Collection_name-note+octave (&lt;code&gt;MutedTrumpet-Bb2.wav&lt;&#x2F;code&gt;); or&lt;&#x2F;li&gt;
&lt;li&gt;The actual midi note (&lt;code&gt;031.wav&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The midi note is then written back to the wave file as part of the “Sampler Chunk”, in the &lt;code&gt;MIDI Unity Note&lt;&#x2F;code&gt; field.&lt;&#x2F;p&gt;
&lt;p&gt;The “Instrument Chunk” has a field with similar purpose, &lt;code&gt;MIDI Unshifted Note&lt;&#x2F;code&gt;. Future versions might write to that as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot; aria-label=&quot;Anchor link for: usage&quot;&gt;#&lt;&#x2F;a&gt;Usage&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;code&gt;rotnot&lt;&#x2F;code&gt; directory, enter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;node index.js
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rationale&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rationale&quot; aria-label=&quot;Anchor link for: rationale&quot;&gt;#&lt;&#x2F;a&gt;Rationale&lt;&#x2F;h2&gt;
&lt;p&gt;I own a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;1010music.com&#x2F;product&#x2F;blackbox&quot;&gt;1010music blackbox hardware sampler&lt;&#x2F;a&gt;. It can load a folder of samples as a multi-sample instrument, but it doesn’t use filenames for note recognition. So I use this to prepare sample packs before moving them to the SD card.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Revercss</title>
		<published>2020-12-05T00:00:00+00:00</published>
		<updated>2020-12-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/revercss/" type="text/html"/>
		<id>https://spitlo.com/code/revercss/</id>
		<content type="html">&lt;p&gt;Revercss, sometimes stylized as ƨƨↄ, was made as a joke many years ago, and “marketed” as&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;a declaration-first paradigm for lean, consistent CSS and increased project maintainibility&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But I still kinda like the idea, especially for small projects.&lt;&#x2F;p&gt;
&lt;p&gt;I also made &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;gulp-revercss&#x2F;&quot;&gt;a gulp plugin for it&lt;&#x2F;a&gt; when that was still a thing.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps I should make a syntax highlighting scheme for it as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;syntax&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#syntax&quot; aria-label=&quot;Anchor link for: syntax&quot;&gt;#&lt;&#x2F;a&gt;Syntax&lt;&#x2F;h2&gt;
&lt;p&gt;In Revercss, style declarations are first-class citizens. Selectors belong to one or many declarations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;color: red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  a, h1
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;color: rgba(100, 0, 0, .5&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  #logo,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  ul.menu&amp;gt;li a
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;border: 2px solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  button,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  #logo,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  ul.menu&amp;gt;li a
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d7af;&quot;&gt;text-decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;: none &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  ul.menu&amp;gt;li a
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d7af;&quot;&gt;min-width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;: 200px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  button,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  input[type=&amp;quot;text&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;padding: 8px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  button,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  input,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  ul.menu&amp;gt;li a
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d7af;&quot;&gt;box-sizing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d7af;&quot;&gt;border-box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  html
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d7af;&quot;&gt;box-sizing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fed6af;&quot;&gt;: inherit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffe000;&quot;&gt;  *, *:before, *:after
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot; aria-label=&quot;Anchor link for: usage&quot;&gt;#&lt;&#x2F;a&gt;Usage&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;console-output&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#console-output&quot; aria-label=&quot;Anchor link for: console-output&quot;&gt;#&lt;&#x2F;a&gt;Console output&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;revercss example.revcss
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;file-output&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#file-output&quot; aria-label=&quot;Anchor link for: file-output&quot;&gt;#&lt;&#x2F;a&gt;File output&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;revercss example.revcss -o parsed.css
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;from-stdin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#from-stdin&quot; aria-label=&quot;Anchor link for: from-stdin&quot;&gt;#&lt;&#x2F;a&gt;From stdin&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;cat example.revcss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;revercss
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;options&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#options&quot; aria-label=&quot;Anchor link for: options&quot;&gt;#&lt;&#x2F;a&gt;Options&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;  -c, --compact
&lt;&#x2F;span&gt;&lt;span&gt;          Output compact CSS
&lt;&#x2F;span&gt;&lt;span&gt;  -m, --minified
&lt;&#x2F;span&gt;&lt;span&gt;          Output minified CSS
&lt;&#x2F;span&gt;&lt;span&gt;  -t, --tabs
&lt;&#x2F;span&gt;&lt;span&gt;          Use tabs instead of spaces in output
&lt;&#x2F;span&gt;&lt;span&gt;  -s, --spaces
&lt;&#x2F;span&gt;&lt;span&gt;          Number of spaces&#x2F;tabs to indent (default: 2)
&lt;&#x2F;span&gt;&lt;span&gt;  -o, --outfile &amp;lt;file&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Write to FILE rather than the console
&lt;&#x2F;span&gt;&lt;span&gt;  -h, --help
&lt;&#x2F;span&gt;&lt;span&gt;          Display help and usage details
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Spoons</title>
		<published>2020-12-05T00:00:00+00:00</published>
		<updated>2020-12-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/spoons/" type="text/html"/>
		<id>https://spitlo.com/code/spoons/</id>
		<content type="html">&lt;p&gt;I use &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.hammerspoon.org&#x2F;&quot;&gt;Hammerspoon&lt;&#x2F;a&gt; together with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;karabiner-elements.pqrs.org&#x2F;&quot;&gt;Karabiner-Elements&lt;&#x2F;a&gt; on macOS to set up keyboard shortcuts and window management.&lt;&#x2F;p&gt;
&lt;p&gt;This repo contains a mix of some of the official Spoons and some of my own or customized Spoons, along with my Hammerspoon config.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;config&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#config&quot; aria-label=&quot;Anchor link for: config&quot;&gt;#&lt;&#x2F;a&gt;Config&lt;&#x2F;h2&gt;
&lt;p&gt;My Hammerspoon hyper key is &lt;code&gt;Shift&lt;&#x2F;code&gt; + &lt;code&gt;Ctrl&lt;&#x2F;code&gt; + &lt;code&gt;Alt&lt;&#x2F;code&gt; + &lt;code&gt;Cmd&lt;&#x2F;code&gt;. I use Karabiner to map &lt;code&gt;Caps Lock&lt;&#x2F;code&gt; to that.&lt;&#x2F;p&gt;
&lt;p&gt;The stuff I use most is probably the WinWin Spoon mentioned below. It’s a window manager that uses a 2x2 grid, and I have mapped &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;Keypad 1-9&lt;&#x2F;code&gt; to the different screens locations. So if I press &lt;code&gt;Caps Lock&lt;&#x2F;code&gt; + &lt;code&gt;Keypad 7&lt;&#x2F;code&gt;, the active window resizes to the top left corner of the screen, let’s call it A1:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;           1                  2
&lt;&#x2F;span&gt;&lt;span&gt;  +------------------+------------------+
&lt;&#x2F;span&gt;&lt;span&gt;  |                  |                  |
&lt;&#x2F;span&gt;&lt;span&gt;A |        A1        |                  |
&lt;&#x2F;span&gt;&lt;span&gt;  |                  |                  |
&lt;&#x2F;span&gt;&lt;span&gt;  +-------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;  |                  |                  |
&lt;&#x2F;span&gt;&lt;span&gt;B |                  |                  |
&lt;&#x2F;span&gt;&lt;span&gt;  |                  |                  |
&lt;&#x2F;span&gt;&lt;span&gt;  +------------------+------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The keys in between the corner keys resizes the window to fill the corresponding row. So &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;Keypad 4&lt;&#x2F;code&gt; resizes the window to cover squares A1 and B1. Lastly, &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;Keypad 5&lt;&#x2F;code&gt; centers the window on the screen but does not maximize it.&lt;&#x2F;p&gt;
&lt;p&gt;On my laptop, I use Karabiner to map &lt;code&gt;Fn&lt;&#x2F;code&gt; + &lt;code&gt;Q&#x2F;W&#x2F;E&lt;&#x2F;code&gt;, &lt;code&gt;A&#x2F;S&#x2F;D&lt;&#x2F;code&gt; and &lt;code&gt;Z&#x2F;X&#x2F;C&lt;&#x2F;code&gt; to the keypad numbers to have the same functionality.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;I&lt;&#x2F;code&gt;, &lt;code&gt;J&lt;&#x2F;code&gt;, &lt;code&gt;K&lt;&#x2F;code&gt; and &lt;code&gt;L&lt;&#x2F;code&gt; moves windows around (Sorry, vim lovers). &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;Arrow Up&#x2F;Down&#x2F;Left&#x2F;Right&lt;&#x2F;code&gt; resizes window with the smart resizing described below. &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;Home&#x2F;End&lt;&#x2F;code&gt; moves windows between monitors and &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;M&lt;&#x2F;code&gt; maximizes the current window.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Alt&lt;&#x2F;code&gt; + &lt;code&gt;Tab&lt;&#x2F;code&gt; activates the next window of the current application, which is good for jumping between projects in VS Code for example.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;N&lt;&#x2F;code&gt; opens &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;brettterpstra.com&#x2F;projects&#x2F;nvalt&#x2F;&quot;&gt;nvAlt&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spoons&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#spoons&quot; aria-label=&quot;Anchor link for: spoons&quot;&gt;#&lt;&#x2F;a&gt;Spoons&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;winwin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#winwin&quot; aria-label=&quot;Anchor link for: winwin&quot;&gt;#&lt;&#x2F;a&gt;WinWin&lt;&#x2F;h3&gt;
&lt;p&gt;The WinWin Spoon included is customized to add a method, &lt;code&gt;smartStepResize&lt;&#x2F;code&gt;, that resizes the focused window “smartly” by one step.&lt;&#x2F;p&gt;
&lt;p&gt;Smartly in this context means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If window gravitates to the left, &lt;code&gt;right&lt;&#x2F;code&gt; and &lt;code&gt;left&lt;&#x2F;code&gt; expands and shrinks the window on the right border (see illustration).&lt;&#x2F;li&gt;
&lt;li&gt;If window is more to the right, it resizes on the left border.&lt;&#x2F;li&gt;
&lt;li&gt;The same principal applies to &lt;code&gt;up&lt;&#x2F;code&gt; and &lt;code&gt;down&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;When a window is full width or full height, it will shrink&#x2F;expand in the ‘direction’ direction.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;  +------------------+------------------+
&lt;&#x2F;span&gt;&lt;span&gt;  |   +-------------------+             |
&lt;&#x2F;span&gt;&lt;span&gt;  |   |              |    |             |
&lt;&#x2F;span&gt;&lt;span&gt;  |   |              |  &amp;lt; | &amp;gt;           |
&lt;&#x2F;span&gt;&lt;span&gt;  +-------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;  |   |         &#x2F;\   |    |             |
&lt;&#x2F;span&gt;&lt;span&gt;  |   +-------------------+             |
&lt;&#x2F;span&gt;&lt;span&gt;  |             \&#x2F;   |                  |
&lt;&#x2F;span&gt;&lt;span&gt;  +------------------+------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;symbats&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#symbats&quot; aria-label=&quot;Anchor link for: symbats&quot;&gt;#&lt;&#x2F;a&gt;Symbats&lt;&#x2F;h3&gt;
&lt;p&gt;There is also a Spoon for quickly finding glyphs from the “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Miscellaneous_Symbols&quot;&gt;Miscellaneous Symbols&lt;&#x2F;a&gt;” and “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dingbat#Dingbats_Unicode_block&quot;&gt;Dingbats&lt;&#x2F;a&gt;” unicode blocks. I have it mapped to &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;S&lt;&#x2F;code&gt;. When triggered, it shows a searchable list of symbols. When a symbol is selected, it gets copied to the clipboard.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;httpstatus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#httpstatus&quot; aria-label=&quot;Anchor link for: httpstatus&quot;&gt;#&lt;&#x2F;a&gt;HttpStatus&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;H&lt;&#x2F;code&gt; triggers something similar to Symbats but for HTTP response codes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clipboardtool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#clipboardtool&quot; aria-label=&quot;Anchor link for: clipboardtool&quot;&gt;#&lt;&#x2F;a&gt;ClipboardTool&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;C&lt;&#x2F;code&gt; triggers something similar to Symbats and HttpStatus but for the clipboard.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;restart-long-running-tasks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#restart-long-running-tasks&quot; aria-label=&quot;Anchor link for: restart-long-running-tasks&quot;&gt;#&lt;&#x2F;a&gt;Restart long-running tasks&lt;&#x2F;h3&gt;
&lt;p&gt;One key combo I use &lt;em&gt;all&lt;&#x2F;em&gt; the time is &lt;code&gt;Ctrl+C - Arrow up - Enter&lt;&#x2F;code&gt; to restart something like &lt;code&gt;yarn start&lt;&#x2F;code&gt;. Pressing &lt;code&gt;Hyper&lt;&#x2F;code&gt; + &lt;code&gt;Q&lt;&#x2F;code&gt; will send that combo to the active application (usually iTerm2).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Firetrak</title>
		<published>2020-12-01T00:00:00+00:00</published>
		<updated>2020-12-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/firetrak/" type="text/html"/>
		<id>https://spitlo.com/code/firetrak/</id>
		<content type="html">&lt;p&gt;Firetrak is used to develop locally with real https certificates using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;traefik.io&quot;&gt;Traefik&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;letsencrypt.org&#x2F;&quot;&gt;Let’s Encrypt&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When running Gatsby&#x2F;Next&#x2F;Django&#x2F;node projects (and other projects that expose a single port we can reverse proxy to) you won’t need Docker&#x2F;Pilothouse&#x2F;Nginx or whatever you currently use to serve https locally. Also, you won’t need to add entries to your &lt;code&gt;hosts&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment, Firetrak supports domains managed by Digitalocean, but it should be pretty easy to extend it to work with any of the Traefik’s &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.traefik.io&#x2F;traefik&#x2F;https&#x2F;acme&#x2F;#providers&quot;&gt;supported providers&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rationale&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rationale&quot; aria-label=&quot;Anchor link for: rationale&quot;&gt;#&lt;&#x2F;a&gt;Rationale&lt;&#x2F;h2&gt;
&lt;p&gt;A lot of my projects at &lt;code&gt;$WORK&lt;&#x2F;code&gt; demand that we use https in development. In 2017 I got a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Pilothouse-App&#x2F;Pilothouse&#x2F;issues&#x2F;93&quot;&gt;feature request&lt;&#x2F;a&gt; implemented in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.pilothouse-app.org&#x2F;&quot;&gt;Pilothouse&lt;&#x2F;a&gt; that allows for using it as a reverse proxy for local projects, and we have used it with success since. But Pilothouse is mostly made for PHP development, depends on Docker, and downloads a bunch of containers to enable multiple versions of PHP. That’s ok on my work computer, but my laptop struggles with it. Also, Covid means more development done on the laptop, and since we don’t do much WordPress development anymore anyway, I felt it was time to look for a more lightweight solution. Hopefully, Firetrak is that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;#&lt;&#x2F;a&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;firetrak&quot;&gt;the repo&lt;&#x2F;a&gt; for up-to-date install instructions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Dotfiles</title>
		<published>2020-11-26T00:00:00+00:00</published>
		<updated>2020-11-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/dotfiles/" type="text/html"/>
		<id>https://spitlo.com/code/dotfiles/</id>
		<content type="html">&lt;p&gt;I keep most of my aliases, functions and config files in a dotfiles repo. They are currently used on two Macs running Mojave, one Pinebook Pro running Manjaro, an Android running Termux on LineageOS and on several instances of Ubuntu Server, so I try to make sure everything’s portable.&lt;&#x2F;p&gt;
&lt;p&gt;Some of this stuff probably only makes sense for me, but there are a few gems here and there that might be of use for others as well.&lt;&#x2F;p&gt;
&lt;p&gt;Below are a few of my most used functions&#x2F;aliases:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cdp&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdp&quot; aria-label=&quot;Anchor link for: cdp&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L438-L484&quot;&gt;&lt;code&gt;cdp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This allows me to jump quickly into project folders. If the project contains an &lt;code&gt;.nvmrc&lt;&#x2F;code&gt; or &lt;code&gt;.python-version&lt;&#x2F;code&gt; file, the correct versions of &lt;code&gt;node&lt;&#x2F;code&gt; and &lt;code&gt;python&lt;&#x2F;code&gt; are set.&lt;&#x2F;p&gt;
&lt;p&gt;The function uses &lt;code&gt;$PROJECT_FOLDER&lt;&#x2F;code&gt; to know where to look. I set it in a file kept out of source control.&lt;&#x2F;p&gt;
&lt;p&gt;There is a corresponding &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;6f41ade4e2ff75e7ddb147d727ec8ad53917d87a&#x2F;.bash_completions&#x2F;cdp&quot;&gt;bash completion script&lt;&#x2F;a&gt;, so if I set &lt;code&gt;$LOCAL_PROJECTS&lt;&#x2F;code&gt; to a space separated string of project names, I get tab completion and can navigate EVEN QUICKER!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#xt&quot; aria-label=&quot;Anchor link for: xt&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L119-L156&quot;&gt;&lt;code&gt;xt&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is so I never have to learn the flags for unrar, unzip, gunzip, tar et al. Cant’t remember where I got this from initially.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgs.xkcd.com&#x2F;comics&#x2F;tar.png&quot; alt=&quot;XKCD: Tar&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qrab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#qrab&quot; aria-label=&quot;Anchor link for: qrab&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L706-L712&quot;&gt;&lt;code&gt;qrab&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This uses &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fukuchi&#x2F;libqrencode&quot;&gt;&lt;code&gt;qrencode&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to create a QR code from whatever is in the clipboard and print it to the terminal. Very helpful when I need to move small pieces of information from my laptop to my phone quickly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;weather&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#weather&quot; aria-label=&quot;Anchor link for: weather&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L771-L773&quot;&gt;&lt;code&gt;weather&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I can never remember where to &lt;code&gt;curl&lt;&#x2F;code&gt; the weather from and what query strings to use, so now I just run &lt;code&gt;weather london&lt;&#x2F;code&gt; to get the London weather in a compact form.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dict&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dict&quot; aria-label=&quot;Anchor link for: dict&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;b601ed079b16e6651545f579d2a437f487af2965&#x2F;.functions#L527-L531&quot;&gt;&lt;code&gt;dict&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Basically the same as &lt;code&gt;weather&lt;&#x2F;code&gt; but for dictionary definitions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;squash&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#squash&quot; aria-label=&quot;Anchor link for: squash&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;bin&#x2F;squash&quot;&gt;&lt;code&gt;squash&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I work on some projects that’s been around since the early 2010s, and I need a local clone, including all assets, for them to work properly when developing. So I need to keep gigs and gigs of images just lying about on my harddrive. But they don’t need to look pretty. So every once in a while I run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;find .&#x2F;media&#x2F;images -xdev -name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;*.jpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; -mtime +360 -execdir squash {} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#ff8080;&quot;&gt;\;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;squash&lt;&#x2F;code&gt; uses ImageMagicks’s &lt;code&gt;mogrify&lt;&#x2F;code&gt; to set the jpeg quality to one, then resets the file’s timestamp, to prevent possible overwrites when syncing with the production server. I can also run it with the environment variable &lt;code&gt;MINIMUM_SIZE&lt;&#x2F;code&gt; set, to only affect images of a significant size.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-tp&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update-tp&quot; aria-label=&quot;Anchor link for: update-tp&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;bin&#x2F;update-tp&quot;&gt;&lt;code&gt;update-tp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;update-tp&lt;&#x2F;code&gt; helps me to update a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;termux&#x2F;termux-packages&quot;&gt;Termux package&lt;&#x2F;a&gt; in my fork, then create a consistently worded commit so I can do a PR. It’s pretty scary to contribute to popular projects and I want to make sure I get it right if I do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot; aria-label=&quot;Anchor link for: update&quot;&gt;#&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;bin&#x2F;update&quot;&gt;&lt;code&gt;update&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;update&lt;&#x2F;code&gt; helps me keep some commands fresh across platforms, often by downloading the latest release from Github or similar and moving it to &lt;code&gt;~&#x2F;bin&lt;&#x2F;code&gt;. This was mostly created out of frustration with the way Homebrew works on macOS, but I use it on Android (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;termux&#x2F;termux-app&quot;&gt;Termux&lt;&#x2F;a&gt;) and Linux as well. At the time of writing, &lt;code&gt;update&lt;&#x2F;code&gt; supports updating the following commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;bat&lt;&#x2F;li&gt;
&lt;li&gt;bombadillo&lt;&#x2F;li&gt;
&lt;li&gt;delta&lt;&#x2F;li&gt;
&lt;li&gt;exa&lt;&#x2F;li&gt;
&lt;li&gt;fzf&lt;&#x2F;li&gt;
&lt;li&gt;grit&lt;&#x2F;li&gt;
&lt;li&gt;gron&lt;&#x2F;li&gt;
&lt;li&gt;h2c&lt;&#x2F;li&gt;
&lt;li&gt;jq&lt;&#x2F;li&gt;
&lt;li&gt;micro&lt;&#x2F;li&gt;
&lt;li&gt;navi&lt;&#x2F;li&gt;
&lt;li&gt;nb&lt;&#x2F;li&gt;
&lt;li&gt;starship&lt;&#x2F;li&gt;
&lt;li&gt;svtplay-dl&lt;&#x2F;li&gt;
&lt;li&gt;wp-cli&lt;&#x2F;li&gt;
&lt;li&gt;youtube-dl&lt;&#x2F;li&gt;
&lt;li&gt;zola&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Zola Deploy</title>
		<published>2020-11-26T00:00:00+00:00</published>
		<updated>2020-11-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/zola-deploy/" type="text/html"/>
		<id>https://spitlo.com/code/zola-deploy/</id>
		<content type="html">&lt;p&gt;I prefer to keep my GitHub Pages files in a &lt;code&gt;docs&lt;&#x2F;code&gt; folder, and not in a separate branch.&lt;&#x2F;p&gt;
&lt;p&gt;But both available actions for Zola deploys in the marketplace uses the &lt;code&gt;gh-pages&lt;&#x2F;code&gt; (branch) method, so I forked the simplest of them and made it even simpler. Than I made it a bit less simple.&lt;&#x2F;p&gt;
&lt;p&gt;This action could be used on &lt;code&gt;push&lt;&#x2F;code&gt; for automatic deploys, but I use it with the event &lt;code&gt;workflow_dispatch&lt;&#x2F;code&gt; to be able to trigger a deploy manually from inside GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;It runs &lt;code&gt;zola check&lt;&#x2F;code&gt; before building. If you supply a &lt;code&gt;SITE_URL&lt;&#x2F;code&gt; variable, it will try to shrink the search index file by replacing all instances of &lt;code&gt;$SITE_URL&lt;&#x2F;code&gt; with empty space.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Shopify Labels</title>
		<published>2020-11-25T00:00:00+00:00</published>
		<updated>2020-11-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/shopify-labels/" type="text/html"/>
		<id>https://spitlo.com/code/shopify-labels/</id>
		<content type="html">&lt;p&gt;This is a very basic app for loading a CSV file of orders exported from Shopify, and generating pages suitable for printing address labels.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment it’s mostly hardcoded to suit my needs, which are three column A4 pages with eleven rows of labels for shipping inside Sweden. The amount of columns and rows can be changed, but it’s not tested. I might make it more customizable in the future, especially since print CSS is quirky and label printing needs some precision&#x2F;fiddling.&lt;&#x2F;p&gt;
&lt;p&gt;No files are sent to the server, this is just a one page HTML&#x2F;JavaScript app.&lt;&#x2F;p&gt;
&lt;p&gt;It’s available online at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;spitlo.com&#x2F;shopify-labels&#x2F;&quot;&gt;https:&#x2F;&#x2F;spitlo.com&#x2F;shopify-labels&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Case</title>
		<published>2020-11-23T00:00:00+00:00</published>
		<updated>2020-11-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/case/" type="text/html"/>
		<id>https://spitlo.com/code/case/</id>
		<content type="html">&lt;p&gt;Case is a plugin for the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;micro-editor.github.io&#x2F;&quot;&gt;&lt;code&gt;micro&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; editor which I’m trying to switch to from &lt;code&gt;nano&lt;&#x2F;code&gt; for quick edits. It converts text between different case styles, like kebab case or pascal case.&lt;&#x2F;p&gt;
&lt;p&gt;It’s pretty basic at the moment, and only supports single cursors.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>At-a-dev</title>
		<published>2020-11-16T00:00:00+00:00</published>
		<updated>2020-11-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/atadev/" type="text/html"/>
		<id>https://spitlo.com/code/atadev/</id>
		<content type="html">&lt;p&gt;At-a-dev is a simple bash script to enable &lt;code&gt;@&lt;&#x2F;code&gt;:ing other devs in code and getting notifications about mentions on &lt;code&gt;git pull&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Use it as a post-merge hook and it will check new files for any mentions and alert the user.&lt;&#x2F;p&gt;
&lt;p&gt;Use it as a command line tool and it will show you all your messages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage-example&quot; aria-label=&quot;Anchor link for: usage-example&quot;&gt;#&lt;&#x2F;a&gt;Usage example&lt;&#x2F;h2&gt;
&lt;p&gt;The office nitpicker spots a few flagrant style crimes, and commits and pushes the following in &lt;code&gt;src&#x2F;index.js&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;mark style=&quot;background-color:#303030;&quot;&gt;&lt;span style=&quot;color:#fffb9d;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;myConst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; @John Please use const and not var
&lt;&#x2F;span&gt;&lt;&#x2F;mark&gt;&lt;span&gt;  a: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#87d6d5;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;mark style=&quot;background-color:#303030;&quot;&gt;&lt;span&gt;  b: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#87d6d5;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; @Bella Please add a trailing comma here, see our style guide
&lt;&#x2F;span&gt;&lt;&#x2F;mark&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;mark style=&quot;background-color:#303030;&quot;&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;&#x2F;mark&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When John runs &lt;code&gt;git pull&lt;&#x2F;code&gt;, he sees the following message:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Mentions in .&#x2F;src&#x2F;index.js
&lt;&#x2F;span&gt;&lt;span&gt;==========================
&lt;&#x2F;span&gt;&lt;span&gt;On line 5:
&lt;&#x2F;span&gt;&lt;span&gt;  var myConst = { &#x2F;&#x2F; @John Please use const and not var
&lt;&#x2F;span&gt;&lt;span&gt;On line 9:
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When Bella runs &lt;code&gt;git pull&lt;&#x2F;code&gt;, she sees the following message:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Mentions in .&#x2F;src&#x2F;index.js
&lt;&#x2F;span&gt;&lt;span&gt;==========================
&lt;&#x2F;span&gt;&lt;span&gt;On line 7:
&lt;&#x2F;span&gt;&lt;span&gt;  b: 2 &#x2F;&#x2F; @Bella Please add a trailing comma here, see our style guide
&lt;&#x2F;span&gt;&lt;span&gt;On line 9:
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bella and John makes their respective changes and remove the relevant message.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps one of them adds a new message:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#fffb9d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6ae;&quot;&gt;myConst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ececec;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  a: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#87d6d5;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  b: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#87d6d5;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; @John and @Bella You should both enable an ESLint plugin in your $EDITOR
&lt;&#x2F;span&gt;&lt;mark style=&quot;background-color:#303030;&quot;&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; Hey, @OfficeNitpicker, it’s better to @ one dev per line, see our style guide
&lt;&#x2F;span&gt;&lt;&#x2F;mark&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;#&lt;&#x2F;a&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;atadev&quot;&gt;the repo&lt;&#x2F;a&gt; for up-to-date install instructions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Merc</title>
		<published>2020-11-16T00:00:00+00:00</published>
		<updated>2020-11-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/merc/" type="text/html"/>
		<id>https://spitlo.com/code/merc/</id>
		<content type="html">&lt;h2 id=&quot;a-gemini-client-written-for-deno&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-gemini-client-written-for-deno&quot; aria-label=&quot;Anchor link for: a-gemini-client-written-for-deno&quot;&gt;#&lt;&#x2F;a&gt;A Gemini client written for Deno&lt;&#x2F;h2&gt;
&lt;p&gt;Merc (formally Mercuriceratops) is a basic client for Gemini, inspired by the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tildegit.org&#x2F;solderpunk&quot;&gt;100 LOC demos&lt;&#x2F;a&gt; by solderpunk.&lt;&#x2F;p&gt;
&lt;p&gt;The name is a nod to and a gentle jab at the tendency in both Deno and Gemini communities to name projects after dinosaurs and zodiac stuff, respectively. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mercuriceratops&quot;&gt;mercuriceratops&lt;&#x2F;a&gt; is a dinosaur of the type species &lt;em&gt;Mercuriceratops gemini&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;alert&quot;&gt;
  This project is now on hold, since I can’t figure out how to make Deno accept most certificates.
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;install-update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install-update&quot; aria-label=&quot;Anchor link for: install-update&quot;&gt;#&lt;&#x2F;a&gt;Install&#x2F;update&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spitlo&#x2F;mercuriceratops&quot;&gt;the repo&lt;&#x2F;a&gt; for up-to-date install instructions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot; aria-label=&quot;Anchor link for: usage&quot;&gt;#&lt;&#x2F;a&gt;Usage&lt;&#x2F;h2&gt;
&lt;p&gt;To visit a Gemini page, enter the URL at the &lt;code&gt;URL&amp;gt;&lt;&#x2F;code&gt; prompt or start it with a URL as argument.
Merc only handles Gemini links for now, and you can leave out the protocol part of the URL.
To go back, enter ‘b’ at the prompt. To quit, enter ‘q’.
To search using gus.guru, enter ‘s’ and then enter your query at the &lt;code&gt;SEARCH&amp;gt;&lt;&#x2F;code&gt; prompt.
To follow a link, enter the link number and press enter.&lt;&#x2F;p&gt;
&lt;p&gt;You can also supply a URL directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;options&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#options&quot; aria-label=&quot;Anchor link for: options&quot;&gt;#&lt;&#x2F;a&gt;Options&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;  -h, --help
&lt;&#x2F;span&gt;&lt;span&gt;          Prints help end exits
&lt;&#x2F;span&gt;&lt;span&gt;  -d, --dump
&lt;&#x2F;span&gt;&lt;span&gt;          Prints document body and exits
&lt;&#x2F;span&gt;&lt;span&gt;  -w, --width &amp;lt;number&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Wraps text at &amp;lt;number&amp;gt; columns
&lt;&#x2F;span&gt;&lt;span&gt;  -p, --paginate &amp;lt;number&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Show &amp;lt;number&amp;gt; of rows at a time.
&lt;&#x2F;span&gt;&lt;span&gt;          Defaults to 50 if no &amp;lt;number&amp;gt; is supplied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Spitlo.com</title>
		<published>2020-11-15T00:00:00+00:00</published>
		<updated>2020-11-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://spitlo.com/code/spitlo-com/" type="text/html"/>
		<id>https://spitlo.com/code/spitlo-com/</id>
		<content type="html">&lt;p&gt;I made this site mainly to improve my HTML and UI skills, having done mostly React and back-end work the last few years.&lt;&#x2F;p&gt;
&lt;p&gt;I also wanted to try out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; and get away from JavaScript for a while.&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, it’s a nice low-stakes place to have some fun and try stuff out, for example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Pages hosting with a custom domain name&lt;&#x2F;li&gt;
&lt;li&gt;GitHub Actions&lt;&#x2F;li&gt;
&lt;li&gt;Handcoded or programatically generated SVGs&lt;&#x2F;li&gt;
&lt;li&gt;Undocumented CSS stuff like animating the &lt;code&gt;content&lt;&#x2F;code&gt; value of &lt;code&gt;::before&lt;&#x2F;code&gt; and &lt;code&gt;::after&lt;&#x2F;code&gt; pseudo-elements&lt;&#x2F;li&gt;
&lt;li&gt;Newer&#x2F;partially supported HTML elements like &lt;code&gt;&amp;lt;details&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ever so slightly dipping my toes into the Rust ecosystem&lt;&#x2F;li&gt;
&lt;li&gt;Using AVIF&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;issues&#x2F;1202&quot;&gt;?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
